// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateProfileParams creates a new UpdateProfileParams object
// with the default values initialized.
func NewUpdateProfileParams() *UpdateProfileParams {
	var ()
	return &UpdateProfileParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateProfileParamsWithTimeout creates a new UpdateProfileParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateProfileParamsWithTimeout(timeout time.Duration) *UpdateProfileParams {
	var ()
	return &UpdateProfileParams{

		timeout: timeout,
	}
}

// NewUpdateProfileParamsWithContext creates a new UpdateProfileParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateProfileParamsWithContext(ctx context.Context) *UpdateProfileParams {
	var ()
	return &UpdateProfileParams{

		Context: ctx,
	}
}

// NewUpdateProfileParamsWithHTTPClient creates a new UpdateProfileParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateProfileParamsWithHTTPClient(client *http.Client) *UpdateProfileParams {
	var ()
	return &UpdateProfileParams{
		HTTPClient: client,
	}
}

/*UpdateProfileParams contains all the parameters to send to the API endpoint
for the update profile operation typically these are written to a http.Request
*/
type UpdateProfileParams struct {

	/*AboutMe
	  This is a short description of user.

	*/
	AboutMe *string
	/*Birthday
	  The date of birth in the format of yyyy-MM-dd.

	*/
	Birthday *strfmt.Date
	/*City
	  The US city of the user's residence.

	*/
	City *string
	/*Country
	  The country of the user's residence. This is a two-character code.

	*/
	Country *string
	/*FoodsLocale
	  The food database locale in the format of xx.XX.

	*/
	FoodsLocale *string
	/*Fullname
	  The fullname of the user.

	*/
	Fullname *string
	/*Gender
	  The sex of the user; (MALE/FEMALE/NA).

	*/
	Gender *string
	/*GlucoseUnit
	  Default glucose unit on website (which doesn't affect API); one of (en_US, en_GB, 'any' for METRIC).

	*/
	GlucoseUnit *string
	/*Height
	  The height in the format X.XX in the unit system that corresponds to the Accept-Language header provided.

	*/
	Height *string
	/*HeightUnit
	  Default height/distance unit on website (which doesn't affect API); one of (en_US, en_GB, 'any' for METRIC).

	*/
	HeightUnit *string
	/*Locale
	  The locale of the website (country/language); one of the locales, currently â€“ (en_US, fr_FR, de_DE, es_ES, en_GB, en_AU, en_NZ, ja_JP).

	*/
	Locale *string
	/*LocaleCountry
	  The Country in the format 'xx'. You should specify either locale or both - localeLang and localeCountry (locale is higher priority).

	*/
	LocaleCountry *string
	/*LocaleLang
	  The Language in the format 'xx'. You should specify either locale or both - localeLang and localeCountry (locale is higher priority).

	*/
	LocaleLang *string
	/*StartDayOfWeek
	  The Start day of the week, meaning what day the week should start on. Either Sunday or Monday.

	*/
	StartDayOfWeek *string
	/*State
	  The US state of the user's residence. This is a two-character code if the country was or is set to US.

	*/
	State *string
	/*StrideLengthRunning
	  Running stride length in the format X.XX, where it is in the unit system that corresponds to the Accept-Language header provided.

	*/
	StrideLengthRunning *string
	/*StrideLengthWalking
	  Walking stride length in the format X.XX, where it is in the unit system that corresponds to the Accept-Language header provided.

	*/
	StrideLengthWalking *string
	/*Timezone
	  The timezone in the format 'America/Los_Angeles'.

	*/
	Timezone *string
	/*WaterUnit
	  Default water unit on website (which doesn't affect API); one of (en_US, en_GB, 'any' for METRIC).

	*/
	WaterUnit *string
	/*WeightUnit
	  Default weight unit on website (which doesn't affect API); one of (en_US, en_GB, 'any' for METRIC).

	*/
	WeightUnit *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update profile params
func (o *UpdateProfileParams) WithTimeout(timeout time.Duration) *UpdateProfileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update profile params
func (o *UpdateProfileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update profile params
func (o *UpdateProfileParams) WithContext(ctx context.Context) *UpdateProfileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update profile params
func (o *UpdateProfileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update profile params
func (o *UpdateProfileParams) WithHTTPClient(client *http.Client) *UpdateProfileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update profile params
func (o *UpdateProfileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAboutMe adds the aboutMe to the update profile params
func (o *UpdateProfileParams) WithAboutMe(aboutMe *string) *UpdateProfileParams {
	o.SetAboutMe(aboutMe)
	return o
}

// SetAboutMe adds the aboutMe to the update profile params
func (o *UpdateProfileParams) SetAboutMe(aboutMe *string) {
	o.AboutMe = aboutMe
}

// WithBirthday adds the birthday to the update profile params
func (o *UpdateProfileParams) WithBirthday(birthday *strfmt.Date) *UpdateProfileParams {
	o.SetBirthday(birthday)
	return o
}

// SetBirthday adds the birthday to the update profile params
func (o *UpdateProfileParams) SetBirthday(birthday *strfmt.Date) {
	o.Birthday = birthday
}

// WithCity adds the city to the update profile params
func (o *UpdateProfileParams) WithCity(city *string) *UpdateProfileParams {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the update profile params
func (o *UpdateProfileParams) SetCity(city *string) {
	o.City = city
}

// WithCountry adds the country to the update profile params
func (o *UpdateProfileParams) WithCountry(country *string) *UpdateProfileParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the update profile params
func (o *UpdateProfileParams) SetCountry(country *string) {
	o.Country = country
}

// WithFoodsLocale adds the foodsLocale to the update profile params
func (o *UpdateProfileParams) WithFoodsLocale(foodsLocale *string) *UpdateProfileParams {
	o.SetFoodsLocale(foodsLocale)
	return o
}

// SetFoodsLocale adds the foodsLocale to the update profile params
func (o *UpdateProfileParams) SetFoodsLocale(foodsLocale *string) {
	o.FoodsLocale = foodsLocale
}

// WithFullname adds the fullname to the update profile params
func (o *UpdateProfileParams) WithFullname(fullname *string) *UpdateProfileParams {
	o.SetFullname(fullname)
	return o
}

// SetFullname adds the fullname to the update profile params
func (o *UpdateProfileParams) SetFullname(fullname *string) {
	o.Fullname = fullname
}

// WithGender adds the gender to the update profile params
func (o *UpdateProfileParams) WithGender(gender *string) *UpdateProfileParams {
	o.SetGender(gender)
	return o
}

// SetGender adds the gender to the update profile params
func (o *UpdateProfileParams) SetGender(gender *string) {
	o.Gender = gender
}

// WithGlucoseUnit adds the glucoseUnit to the update profile params
func (o *UpdateProfileParams) WithGlucoseUnit(glucoseUnit *string) *UpdateProfileParams {
	o.SetGlucoseUnit(glucoseUnit)
	return o
}

// SetGlucoseUnit adds the glucoseUnit to the update profile params
func (o *UpdateProfileParams) SetGlucoseUnit(glucoseUnit *string) {
	o.GlucoseUnit = glucoseUnit
}

// WithHeight adds the height to the update profile params
func (o *UpdateProfileParams) WithHeight(height *string) *UpdateProfileParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the update profile params
func (o *UpdateProfileParams) SetHeight(height *string) {
	o.Height = height
}

// WithHeightUnit adds the heightUnit to the update profile params
func (o *UpdateProfileParams) WithHeightUnit(heightUnit *string) *UpdateProfileParams {
	o.SetHeightUnit(heightUnit)
	return o
}

// SetHeightUnit adds the heightUnit to the update profile params
func (o *UpdateProfileParams) SetHeightUnit(heightUnit *string) {
	o.HeightUnit = heightUnit
}

// WithLocale adds the locale to the update profile params
func (o *UpdateProfileParams) WithLocale(locale *string) *UpdateProfileParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the update profile params
func (o *UpdateProfileParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithLocaleCountry adds the localeCountry to the update profile params
func (o *UpdateProfileParams) WithLocaleCountry(localeCountry *string) *UpdateProfileParams {
	o.SetLocaleCountry(localeCountry)
	return o
}

// SetLocaleCountry adds the localeCountry to the update profile params
func (o *UpdateProfileParams) SetLocaleCountry(localeCountry *string) {
	o.LocaleCountry = localeCountry
}

// WithLocaleLang adds the localeLang to the update profile params
func (o *UpdateProfileParams) WithLocaleLang(localeLang *string) *UpdateProfileParams {
	o.SetLocaleLang(localeLang)
	return o
}

// SetLocaleLang adds the localeLang to the update profile params
func (o *UpdateProfileParams) SetLocaleLang(localeLang *string) {
	o.LocaleLang = localeLang
}

// WithStartDayOfWeek adds the startDayOfWeek to the update profile params
func (o *UpdateProfileParams) WithStartDayOfWeek(startDayOfWeek *string) *UpdateProfileParams {
	o.SetStartDayOfWeek(startDayOfWeek)
	return o
}

// SetStartDayOfWeek adds the startDayOfWeek to the update profile params
func (o *UpdateProfileParams) SetStartDayOfWeek(startDayOfWeek *string) {
	o.StartDayOfWeek = startDayOfWeek
}

// WithState adds the state to the update profile params
func (o *UpdateProfileParams) WithState(state *string) *UpdateProfileParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the update profile params
func (o *UpdateProfileParams) SetState(state *string) {
	o.State = state
}

// WithStrideLengthRunning adds the strideLengthRunning to the update profile params
func (o *UpdateProfileParams) WithStrideLengthRunning(strideLengthRunning *string) *UpdateProfileParams {
	o.SetStrideLengthRunning(strideLengthRunning)
	return o
}

// SetStrideLengthRunning adds the strideLengthRunning to the update profile params
func (o *UpdateProfileParams) SetStrideLengthRunning(strideLengthRunning *string) {
	o.StrideLengthRunning = strideLengthRunning
}

// WithStrideLengthWalking adds the strideLengthWalking to the update profile params
func (o *UpdateProfileParams) WithStrideLengthWalking(strideLengthWalking *string) *UpdateProfileParams {
	o.SetStrideLengthWalking(strideLengthWalking)
	return o
}

// SetStrideLengthWalking adds the strideLengthWalking to the update profile params
func (o *UpdateProfileParams) SetStrideLengthWalking(strideLengthWalking *string) {
	o.StrideLengthWalking = strideLengthWalking
}

// WithTimezone adds the timezone to the update profile params
func (o *UpdateProfileParams) WithTimezone(timezone *string) *UpdateProfileParams {
	o.SetTimezone(timezone)
	return o
}

// SetTimezone adds the timezone to the update profile params
func (o *UpdateProfileParams) SetTimezone(timezone *string) {
	o.Timezone = timezone
}

// WithWaterUnit adds the waterUnit to the update profile params
func (o *UpdateProfileParams) WithWaterUnit(waterUnit *string) *UpdateProfileParams {
	o.SetWaterUnit(waterUnit)
	return o
}

// SetWaterUnit adds the waterUnit to the update profile params
func (o *UpdateProfileParams) SetWaterUnit(waterUnit *string) {
	o.WaterUnit = waterUnit
}

// WithWeightUnit adds the weightUnit to the update profile params
func (o *UpdateProfileParams) WithWeightUnit(weightUnit *string) *UpdateProfileParams {
	o.SetWeightUnit(weightUnit)
	return o
}

// SetWeightUnit adds the weightUnit to the update profile params
func (o *UpdateProfileParams) SetWeightUnit(weightUnit *string) {
	o.WeightUnit = weightUnit
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateProfileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AboutMe != nil {

		// form param aboutMe
		var frAboutMe string
		if o.AboutMe != nil {
			frAboutMe = *o.AboutMe
		}
		fAboutMe := frAboutMe
		if fAboutMe != "" {
			if err := r.SetFormParam("aboutMe", fAboutMe); err != nil {
				return err
			}
		}

	}

	if o.Birthday != nil {

		// form param birthday
		var frBirthday strfmt.Date
		if o.Birthday != nil {
			frBirthday = *o.Birthday
		}
		fBirthday := frBirthday.String()
		if fBirthday != "" {
			if err := r.SetFormParam("birthday", fBirthday); err != nil {
				return err
			}
		}

	}

	if o.City != nil {

		// form param city
		var frCity string
		if o.City != nil {
			frCity = *o.City
		}
		fCity := frCity
		if fCity != "" {
			if err := r.SetFormParam("city", fCity); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// form param country
		var frCountry string
		if o.Country != nil {
			frCountry = *o.Country
		}
		fCountry := frCountry
		if fCountry != "" {
			if err := r.SetFormParam("country", fCountry); err != nil {
				return err
			}
		}

	}

	if o.FoodsLocale != nil {

		// form param foodsLocale
		var frFoodsLocale string
		if o.FoodsLocale != nil {
			frFoodsLocale = *o.FoodsLocale
		}
		fFoodsLocale := frFoodsLocale
		if fFoodsLocale != "" {
			if err := r.SetFormParam("foodsLocale", fFoodsLocale); err != nil {
				return err
			}
		}

	}

	if o.Fullname != nil {

		// form param fullname
		var frFullname string
		if o.Fullname != nil {
			frFullname = *o.Fullname
		}
		fFullname := frFullname
		if fFullname != "" {
			if err := r.SetFormParam("fullname", fFullname); err != nil {
				return err
			}
		}

	}

	if o.Gender != nil {

		// form param gender
		var frGender string
		if o.Gender != nil {
			frGender = *o.Gender
		}
		fGender := frGender
		if fGender != "" {
			if err := r.SetFormParam("gender", fGender); err != nil {
				return err
			}
		}

	}

	if o.GlucoseUnit != nil {

		// form param glucoseUnit
		var frGlucoseUnit string
		if o.GlucoseUnit != nil {
			frGlucoseUnit = *o.GlucoseUnit
		}
		fGlucoseUnit := frGlucoseUnit
		if fGlucoseUnit != "" {
			if err := r.SetFormParam("glucoseUnit", fGlucoseUnit); err != nil {
				return err
			}
		}

	}

	if o.Height != nil {

		// form param height
		var frHeight string
		if o.Height != nil {
			frHeight = *o.Height
		}
		fHeight := frHeight
		if fHeight != "" {
			if err := r.SetFormParam("height", fHeight); err != nil {
				return err
			}
		}

	}

	if o.HeightUnit != nil {

		// form param heightUnit
		var frHeightUnit string
		if o.HeightUnit != nil {
			frHeightUnit = *o.HeightUnit
		}
		fHeightUnit := frHeightUnit
		if fHeightUnit != "" {
			if err := r.SetFormParam("heightUnit", fHeightUnit); err != nil {
				return err
			}
		}

	}

	if o.Locale != nil {

		// form param locale
		var frLocale string
		if o.Locale != nil {
			frLocale = *o.Locale
		}
		fLocale := frLocale
		if fLocale != "" {
			if err := r.SetFormParam("locale", fLocale); err != nil {
				return err
			}
		}

	}

	if o.LocaleCountry != nil {

		// form param localeCountry
		var frLocaleCountry string
		if o.LocaleCountry != nil {
			frLocaleCountry = *o.LocaleCountry
		}
		fLocaleCountry := frLocaleCountry
		if fLocaleCountry != "" {
			if err := r.SetFormParam("localeCountry", fLocaleCountry); err != nil {
				return err
			}
		}

	}

	if o.LocaleLang != nil {

		// form param localeLang
		var frLocaleLang string
		if o.LocaleLang != nil {
			frLocaleLang = *o.LocaleLang
		}
		fLocaleLang := frLocaleLang
		if fLocaleLang != "" {
			if err := r.SetFormParam("localeLang", fLocaleLang); err != nil {
				return err
			}
		}

	}

	if o.StartDayOfWeek != nil {

		// form param startDayOfWeek
		var frStartDayOfWeek string
		if o.StartDayOfWeek != nil {
			frStartDayOfWeek = *o.StartDayOfWeek
		}
		fStartDayOfWeek := frStartDayOfWeek
		if fStartDayOfWeek != "" {
			if err := r.SetFormParam("startDayOfWeek", fStartDayOfWeek); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// form param state
		var frState string
		if o.State != nil {
			frState = *o.State
		}
		fState := frState
		if fState != "" {
			if err := r.SetFormParam("state", fState); err != nil {
				return err
			}
		}

	}

	if o.StrideLengthRunning != nil {

		// form param strideLengthRunning
		var frStrideLengthRunning string
		if o.StrideLengthRunning != nil {
			frStrideLengthRunning = *o.StrideLengthRunning
		}
		fStrideLengthRunning := frStrideLengthRunning
		if fStrideLengthRunning != "" {
			if err := r.SetFormParam("strideLengthRunning", fStrideLengthRunning); err != nil {
				return err
			}
		}

	}

	if o.StrideLengthWalking != nil {

		// form param strideLengthWalking
		var frStrideLengthWalking string
		if o.StrideLengthWalking != nil {
			frStrideLengthWalking = *o.StrideLengthWalking
		}
		fStrideLengthWalking := frStrideLengthWalking
		if fStrideLengthWalking != "" {
			if err := r.SetFormParam("strideLengthWalking", fStrideLengthWalking); err != nil {
				return err
			}
		}

	}

	if o.Timezone != nil {

		// form param timezone
		var frTimezone string
		if o.Timezone != nil {
			frTimezone = *o.Timezone
		}
		fTimezone := frTimezone
		if fTimezone != "" {
			if err := r.SetFormParam("timezone", fTimezone); err != nil {
				return err
			}
		}

	}

	if o.WaterUnit != nil {

		// form param waterUnit
		var frWaterUnit string
		if o.WaterUnit != nil {
			frWaterUnit = *o.WaterUnit
		}
		fWaterUnit := frWaterUnit
		if fWaterUnit != "" {
			if err := r.SetFormParam("waterUnit", fWaterUnit); err != nil {
				return err
			}
		}

	}

	if o.WeightUnit != nil {

		// form param weightUnit
		var frWeightUnit string
		if o.WeightUnit != nil {
			frWeightUnit = *o.WeightUnit
		}
		fWeightUnit := frWeightUnit
		if fWeightUnit != "" {
			if err := r.SetFormParam("weightUnit", fWeightUnit); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
