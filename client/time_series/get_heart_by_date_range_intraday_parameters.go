// Code generated by go-swagger; DO NOT EDIT.

package time_series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetHeartByDateRangeIntradayParams creates a new GetHeartByDateRangeIntradayParams object
// with the default values initialized.
func NewGetHeartByDateRangeIntradayParams() *GetHeartByDateRangeIntradayParams {
	var (
		detailLevelDefault = string("1min")
	)
	return &GetHeartByDateRangeIntradayParams{
		DetailLevel: detailLevelDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHeartByDateRangeIntradayParamsWithTimeout creates a new GetHeartByDateRangeIntradayParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHeartByDateRangeIntradayParamsWithTimeout(timeout time.Duration) *GetHeartByDateRangeIntradayParams {
	var (
		detailLevelDefault = string("1min")
	)
	return &GetHeartByDateRangeIntradayParams{
		DetailLevel: detailLevelDefault,

		timeout: timeout,
	}
}

// NewGetHeartByDateRangeIntradayParamsWithContext creates a new GetHeartByDateRangeIntradayParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHeartByDateRangeIntradayParamsWithContext(ctx context.Context) *GetHeartByDateRangeIntradayParams {
	var (
		detailLevelDefault = string("1min")
	)
	return &GetHeartByDateRangeIntradayParams{
		DetailLevel: detailLevelDefault,

		Context: ctx,
	}
}

// NewGetHeartByDateRangeIntradayParamsWithHTTPClient creates a new GetHeartByDateRangeIntradayParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHeartByDateRangeIntradayParamsWithHTTPClient(client *http.Client) *GetHeartByDateRangeIntradayParams {
	var (
		detailLevelDefault = string("1min")
	)
	return &GetHeartByDateRangeIntradayParams{
		DetailLevel: detailLevelDefault,
		HTTPClient:  client,
	}
}

/*GetHeartByDateRangeIntradayParams contains all the parameters to send to the API endpoint
for the get heart by date range intraday operation typically these are written to a http.Request
*/
type GetHeartByDateRangeIntradayParams struct {

	/*Date
	  The date in the format of yyyy-MM-dd or today.

	*/
	Date strfmt.Date
	/*DetailLevel
	  The number of data points to include either 1sec or 1min.

	*/
	DetailLevel string
	/*EndDate
	  The end date in the format of yyyy-MM-dd or today.

	*/
	EndDate strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) WithTimeout(timeout time.Duration) *GetHeartByDateRangeIntradayParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) WithContext(ctx context.Context) *GetHeartByDateRangeIntradayParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) WithHTTPClient(client *http.Client) *GetHeartByDateRangeIntradayParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDate adds the date to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) WithDate(date strfmt.Date) *GetHeartByDateRangeIntradayParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) SetDate(date strfmt.Date) {
	o.Date = date
}

// WithDetailLevel adds the detailLevel to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) WithDetailLevel(detailLevel string) *GetHeartByDateRangeIntradayParams {
	o.SetDetailLevel(detailLevel)
	return o
}

// SetDetailLevel adds the detailLevel to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) SetDetailLevel(detailLevel string) {
	o.DetailLevel = detailLevel
}

// WithEndDate adds the endDate to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) WithEndDate(endDate strfmt.Date) *GetHeartByDateRangeIntradayParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get heart by date range intraday params
func (o *GetHeartByDateRangeIntradayParams) SetEndDate(endDate strfmt.Date) {
	o.EndDate = endDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetHeartByDateRangeIntradayParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param date
	if err := r.SetPathParam("date", o.Date.String()); err != nil {
		return err
	}

	// path param detail-level
	if err := r.SetPathParam("detail-level", o.DetailLevel); err != nil {
		return err
	}

	// path param end-date
	if err := r.SetPathParam("end-date", o.EndDate.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
