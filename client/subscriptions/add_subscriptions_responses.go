// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AddSubscriptionsReader is a Reader for the AddSubscriptions structure.
type AddSubscriptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddSubscriptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddSubscriptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewAddSubscriptionsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewAddSubscriptionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddSubscriptionsOK creates a AddSubscriptionsOK with default headers values
func NewAddSubscriptionsOK() *AddSubscriptionsOK {
	return &AddSubscriptionsOK{}
}

/*AddSubscriptionsOK handles this case with default header values.

Returned if the given user is already subscribed to the stream.
*/
type AddSubscriptionsOK struct {
}

func (o *AddSubscriptionsOK) Error() string {
	return fmt.Sprintf("[POST /1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json][%d] addSubscriptionsOK ", 200)
}

func (o *AddSubscriptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddSubscriptionsCreated creates a AddSubscriptionsCreated with default headers values
func NewAddSubscriptionsCreated() *AddSubscriptionsCreated {
	return &AddSubscriptionsCreated{}
}

/*AddSubscriptionsCreated handles this case with default header values.

Returned if a new subscription was created in response to your request.
*/
type AddSubscriptionsCreated struct {
}

func (o *AddSubscriptionsCreated) Error() string {
	return fmt.Sprintf("[POST /1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json][%d] addSubscriptionsCreated ", 201)
}

func (o *AddSubscriptionsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddSubscriptionsConflict creates a AddSubscriptionsConflict with default headers values
func NewAddSubscriptionsConflict() *AddSubscriptionsConflict {
	return &AddSubscriptionsConflict{}
}

/*AddSubscriptionsConflict handles this case with default header values.

Returned if the given user is already subscribed to this stream using a different subscription ID, OR if the given subscription ID is already used to identify a subscription to a different stream.
*/
type AddSubscriptionsConflict struct {
}

func (o *AddSubscriptionsConflict) Error() string {
	return fmt.Sprintf("[POST /1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json][%d] addSubscriptionsConflict ", 409)
}

func (o *AddSubscriptionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
