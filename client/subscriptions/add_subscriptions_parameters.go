// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddSubscriptionsParams creates a new AddSubscriptionsParams object
// with the default values initialized.
func NewAddSubscriptionsParams() *AddSubscriptionsParams {
	var ()
	return &AddSubscriptionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddSubscriptionsParamsWithTimeout creates a new AddSubscriptionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddSubscriptionsParamsWithTimeout(timeout time.Duration) *AddSubscriptionsParams {
	var ()
	return &AddSubscriptionsParams{

		timeout: timeout,
	}
}

// NewAddSubscriptionsParamsWithContext creates a new AddSubscriptionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddSubscriptionsParamsWithContext(ctx context.Context) *AddSubscriptionsParams {
	var ()
	return &AddSubscriptionsParams{

		Context: ctx,
	}
}

// NewAddSubscriptionsParamsWithHTTPClient creates a new AddSubscriptionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddSubscriptionsParamsWithHTTPClient(client *http.Client) *AddSubscriptionsParams {
	var ()
	return &AddSubscriptionsParams{
		HTTPClient: client,
	}
}

/*AddSubscriptionsParams contains all the parameters to send to the API endpoint
for the add subscriptions operation typically these are written to a http.Request
*/
type AddSubscriptionsParams struct {

	/*CollectionPath
	  This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections' updates. Each subscriber can have only one subscription for a specific user's collection.

	*/
	CollectionPath string
	/*SubscriptionID
	  This is the unique ID of the subscription created by the API client application. Each ID must be unique across the entire set of subscribers and collections. The Fitbit servers will pass this ID back along with any notifications about the user indicated by the user parameter in the URL path.

	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add subscriptions params
func (o *AddSubscriptionsParams) WithTimeout(timeout time.Duration) *AddSubscriptionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add subscriptions params
func (o *AddSubscriptionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add subscriptions params
func (o *AddSubscriptionsParams) WithContext(ctx context.Context) *AddSubscriptionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add subscriptions params
func (o *AddSubscriptionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add subscriptions params
func (o *AddSubscriptionsParams) WithHTTPClient(client *http.Client) *AddSubscriptionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add subscriptions params
func (o *AddSubscriptionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectionPath adds the collectionPath to the add subscriptions params
func (o *AddSubscriptionsParams) WithCollectionPath(collectionPath string) *AddSubscriptionsParams {
	o.SetCollectionPath(collectionPath)
	return o
}

// SetCollectionPath adds the collectionPath to the add subscriptions params
func (o *AddSubscriptionsParams) SetCollectionPath(collectionPath string) {
	o.CollectionPath = collectionPath
}

// WithSubscriptionID adds the subscriptionID to the add subscriptions params
func (o *AddSubscriptionsParams) WithSubscriptionID(subscriptionID string) *AddSubscriptionsParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the add subscriptions params
func (o *AddSubscriptionsParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *AddSubscriptionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param collection-path
	if err := r.SetPathParam("collection-path", o.CollectionPath); err != nil {
		return err
	}

	// path param subscription-id
	if err := r.SetPathParam("subscription-id", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
