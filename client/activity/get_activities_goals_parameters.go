// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetActivitiesGoalsParams creates a new GetActivitiesGoalsParams object
// with the default values initialized.
func NewGetActivitiesGoalsParams() *GetActivitiesGoalsParams {
	var ()
	return &GetActivitiesGoalsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetActivitiesGoalsParamsWithTimeout creates a new GetActivitiesGoalsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetActivitiesGoalsParamsWithTimeout(timeout time.Duration) *GetActivitiesGoalsParams {
	var ()
	return &GetActivitiesGoalsParams{

		timeout: timeout,
	}
}

// NewGetActivitiesGoalsParamsWithContext creates a new GetActivitiesGoalsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetActivitiesGoalsParamsWithContext(ctx context.Context) *GetActivitiesGoalsParams {
	var ()
	return &GetActivitiesGoalsParams{

		Context: ctx,
	}
}

// NewGetActivitiesGoalsParamsWithHTTPClient creates a new GetActivitiesGoalsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetActivitiesGoalsParamsWithHTTPClient(client *http.Client) *GetActivitiesGoalsParams {
	var ()
	return &GetActivitiesGoalsParams{
		HTTPClient: client,
	}
}

/*GetActivitiesGoalsParams contains all the parameters to send to the API endpoint
for the get activities goals operation typically these are written to a http.Request
*/
type GetActivitiesGoalsParams struct {

	/*Period
	  daily or weekly.

	*/
	Period string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get activities goals params
func (o *GetActivitiesGoalsParams) WithTimeout(timeout time.Duration) *GetActivitiesGoalsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get activities goals params
func (o *GetActivitiesGoalsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get activities goals params
func (o *GetActivitiesGoalsParams) WithContext(ctx context.Context) *GetActivitiesGoalsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get activities goals params
func (o *GetActivitiesGoalsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get activities goals params
func (o *GetActivitiesGoalsParams) WithHTTPClient(client *http.Client) *GetActivitiesGoalsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get activities goals params
func (o *GetActivitiesGoalsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPeriod adds the period to the get activities goals params
func (o *GetActivitiesGoalsParams) WithPeriod(period string) *GetActivitiesGoalsParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the get activities goals params
func (o *GetActivitiesGoalsParams) SetPeriod(period string) {
	o.Period = period
}

// WriteToRequest writes these params to a swagger request
func (o *GetActivitiesGoalsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param period
	if err := r.SetPathParam("period", o.Period); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
