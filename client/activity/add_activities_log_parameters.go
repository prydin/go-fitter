// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddActivitiesLogParams creates a new AddActivitiesLogParams object
// with the default values initialized.
func NewAddActivitiesLogParams() *AddActivitiesLogParams {
	var ()
	return &AddActivitiesLogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddActivitiesLogParamsWithTimeout creates a new AddActivitiesLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddActivitiesLogParamsWithTimeout(timeout time.Duration) *AddActivitiesLogParams {
	var ()
	return &AddActivitiesLogParams{

		timeout: timeout,
	}
}

// NewAddActivitiesLogParamsWithContext creates a new AddActivitiesLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddActivitiesLogParamsWithContext(ctx context.Context) *AddActivitiesLogParams {
	var ()
	return &AddActivitiesLogParams{

		Context: ctx,
	}
}

// NewAddActivitiesLogParamsWithHTTPClient creates a new AddActivitiesLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddActivitiesLogParamsWithHTTPClient(client *http.Client) *AddActivitiesLogParams {
	var ()
	return &AddActivitiesLogParams{
		HTTPClient: client,
	}
}

/*AddActivitiesLogParams contains all the parameters to send to the API endpoint
for the add activities log operation typically these are written to a http.Request
*/
type AddActivitiesLogParams struct {

	/*ActivityID
	  The ID of the activity, directory activity or intensity level activity.

	*/
	ActivityID int64
	/*ActivityName
	  Custom activity name. Either activityId or activityName must be provided.

	*/
	ActivityName *string
	/*Date
	  Log entry date in the format yyyy-MM-dd.

	*/
	Date strfmt.Date
	/*Distance
	  Distance is required for logging directory activity in the format X.XX and in the selected distanceUnit.

	*/
	Distance int64
	/*DistanceUnit
	  Distance measurement unit. Steps units are available only for Walking (activityId=90013) and Running (activityId=90009) directory activities and their intensity levels.

	*/
	DistanceUnit *int64
	/*DurationMillis
	  Duration in milliseconds.

	*/
	DurationMillis int64
	/*ManualCalories
	  Calories burned that are manaully specified. Required with activityName must be provided.

	*/
	ManualCalories int64
	/*StartTime
	  Activity start time. Hours and minutes in the format HH:mm:ss.

	*/
	StartTime string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add activities log params
func (o *AddActivitiesLogParams) WithTimeout(timeout time.Duration) *AddActivitiesLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add activities log params
func (o *AddActivitiesLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add activities log params
func (o *AddActivitiesLogParams) WithContext(ctx context.Context) *AddActivitiesLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add activities log params
func (o *AddActivitiesLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add activities log params
func (o *AddActivitiesLogParams) WithHTTPClient(client *http.Client) *AddActivitiesLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add activities log params
func (o *AddActivitiesLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActivityID adds the activityID to the add activities log params
func (o *AddActivitiesLogParams) WithActivityID(activityID int64) *AddActivitiesLogParams {
	o.SetActivityID(activityID)
	return o
}

// SetActivityID adds the activityId to the add activities log params
func (o *AddActivitiesLogParams) SetActivityID(activityID int64) {
	o.ActivityID = activityID
}

// WithActivityName adds the activityName to the add activities log params
func (o *AddActivitiesLogParams) WithActivityName(activityName *string) *AddActivitiesLogParams {
	o.SetActivityName(activityName)
	return o
}

// SetActivityName adds the activityName to the add activities log params
func (o *AddActivitiesLogParams) SetActivityName(activityName *string) {
	o.ActivityName = activityName
}

// WithDate adds the date to the add activities log params
func (o *AddActivitiesLogParams) WithDate(date strfmt.Date) *AddActivitiesLogParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the add activities log params
func (o *AddActivitiesLogParams) SetDate(date strfmt.Date) {
	o.Date = date
}

// WithDistance adds the distance to the add activities log params
func (o *AddActivitiesLogParams) WithDistance(distance int64) *AddActivitiesLogParams {
	o.SetDistance(distance)
	return o
}

// SetDistance adds the distance to the add activities log params
func (o *AddActivitiesLogParams) SetDistance(distance int64) {
	o.Distance = distance
}

// WithDistanceUnit adds the distanceUnit to the add activities log params
func (o *AddActivitiesLogParams) WithDistanceUnit(distanceUnit *int64) *AddActivitiesLogParams {
	o.SetDistanceUnit(distanceUnit)
	return o
}

// SetDistanceUnit adds the distanceUnit to the add activities log params
func (o *AddActivitiesLogParams) SetDistanceUnit(distanceUnit *int64) {
	o.DistanceUnit = distanceUnit
}

// WithDurationMillis adds the durationMillis to the add activities log params
func (o *AddActivitiesLogParams) WithDurationMillis(durationMillis int64) *AddActivitiesLogParams {
	o.SetDurationMillis(durationMillis)
	return o
}

// SetDurationMillis adds the durationMillis to the add activities log params
func (o *AddActivitiesLogParams) SetDurationMillis(durationMillis int64) {
	o.DurationMillis = durationMillis
}

// WithManualCalories adds the manualCalories to the add activities log params
func (o *AddActivitiesLogParams) WithManualCalories(manualCalories int64) *AddActivitiesLogParams {
	o.SetManualCalories(manualCalories)
	return o
}

// SetManualCalories adds the manualCalories to the add activities log params
func (o *AddActivitiesLogParams) SetManualCalories(manualCalories int64) {
	o.ManualCalories = manualCalories
}

// WithStartTime adds the startTime to the add activities log params
func (o *AddActivitiesLogParams) WithStartTime(startTime string) *AddActivitiesLogParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the add activities log params
func (o *AddActivitiesLogParams) SetStartTime(startTime string) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *AddActivitiesLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param activityId
	qrActivityID := o.ActivityID
	qActivityID := swag.FormatInt64(qrActivityID)
	if qActivityID != "" {
		if err := r.SetQueryParam("activityId", qActivityID); err != nil {
			return err
		}
	}

	if o.ActivityName != nil {

		// query param activityName
		var qrActivityName string
		if o.ActivityName != nil {
			qrActivityName = *o.ActivityName
		}
		qActivityName := qrActivityName
		if qActivityName != "" {
			if err := r.SetQueryParam("activityName", qActivityName); err != nil {
				return err
			}
		}

	}

	// query param date
	qrDate := o.Date
	qDate := qrDate.String()
	if qDate != "" {
		if err := r.SetQueryParam("date", qDate); err != nil {
			return err
		}
	}

	// query param distance
	qrDistance := o.Distance
	qDistance := swag.FormatInt64(qrDistance)
	if qDistance != "" {
		if err := r.SetQueryParam("distance", qDistance); err != nil {
			return err
		}
	}

	if o.DistanceUnit != nil {

		// query param distanceUnit
		var qrDistanceUnit int64
		if o.DistanceUnit != nil {
			qrDistanceUnit = *o.DistanceUnit
		}
		qDistanceUnit := swag.FormatInt64(qrDistanceUnit)
		if qDistanceUnit != "" {
			if err := r.SetQueryParam("distanceUnit", qDistanceUnit); err != nil {
				return err
			}
		}

	}

	// query param durationMillis
	qrDurationMillis := o.DurationMillis
	qDurationMillis := swag.FormatInt64(qrDurationMillis)
	if qDurationMillis != "" {
		if err := r.SetQueryParam("durationMillis", qDurationMillis); err != nil {
			return err
		}
	}

	// query param manualCalories
	qrManualCalories := o.ManualCalories
	qManualCalories := swag.FormatInt64(qrManualCalories)
	if qManualCalories != "" {
		if err := r.SetQueryParam("manualCalories", qManualCalories); err != nil {
			return err
		}
	}

	// query param startTime
	qrStartTime := o.StartTime
	qStartTime := qrStartTime
	if qStartTime != "" {
		if err := r.SetQueryParam("startTime", qStartTime); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
