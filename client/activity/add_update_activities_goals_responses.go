// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AddUpdateActivitiesGoalsReader is a Reader for the AddUpdateActivitiesGoals structure.
type AddUpdateActivitiesGoalsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUpdateActivitiesGoalsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddUpdateActivitiesGoalsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddUpdateActivitiesGoalsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddUpdateActivitiesGoalsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddUpdateActivitiesGoalsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddUpdateActivitiesGoalsOK creates a AddUpdateActivitiesGoalsOK with default headers values
func NewAddUpdateActivitiesGoalsOK() *AddUpdateActivitiesGoalsOK {
	return &AddUpdateActivitiesGoalsOK{}
}

/*AddUpdateActivitiesGoalsOK handles this case with default header values.

A successful request.
*/
type AddUpdateActivitiesGoalsOK struct {
}

func (o *AddUpdateActivitiesGoalsOK) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities/goals/{period}.json][%d] addUpdateActivitiesGoalsOK ", 200)
}

func (o *AddUpdateActivitiesGoalsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUpdateActivitiesGoalsBadRequest creates a AddUpdateActivitiesGoalsBadRequest with default headers values
func NewAddUpdateActivitiesGoalsBadRequest() *AddUpdateActivitiesGoalsBadRequest {
	return &AddUpdateActivitiesGoalsBadRequest{}
}

/*AddUpdateActivitiesGoalsBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type AddUpdateActivitiesGoalsBadRequest struct {
}

func (o *AddUpdateActivitiesGoalsBadRequest) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities/goals/{period}.json][%d] addUpdateActivitiesGoalsBadRequest ", 400)
}

func (o *AddUpdateActivitiesGoalsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUpdateActivitiesGoalsUnauthorized creates a AddUpdateActivitiesGoalsUnauthorized with default headers values
func NewAddUpdateActivitiesGoalsUnauthorized() *AddUpdateActivitiesGoalsUnauthorized {
	return &AddUpdateActivitiesGoalsUnauthorized{}
}

/*AddUpdateActivitiesGoalsUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type AddUpdateActivitiesGoalsUnauthorized struct {
}

func (o *AddUpdateActivitiesGoalsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities/goals/{period}.json][%d] addUpdateActivitiesGoalsUnauthorized ", 401)
}

func (o *AddUpdateActivitiesGoalsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUpdateActivitiesGoalsConflict creates a AddUpdateActivitiesGoalsConflict with default headers values
func NewAddUpdateActivitiesGoalsConflict() *AddUpdateActivitiesGoalsConflict {
	return &AddUpdateActivitiesGoalsConflict{}
}

/*AddUpdateActivitiesGoalsConflict handles this case with default header values.

Returned if the given user is already subscribed to this stream using a different subscription ID, OR if the given subscription ID is already used to identify a subscription to a different stream.
*/
type AddUpdateActivitiesGoalsConflict struct {
}

func (o *AddUpdateActivitiesGoalsConflict) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities/goals/{period}.json][%d] addUpdateActivitiesGoalsConflict ", 409)
}

func (o *AddUpdateActivitiesGoalsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
