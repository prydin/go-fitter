// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetFavoriteActivitiesReader is a Reader for the GetFavoriteActivities structure.
type GetFavoriteActivitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFavoriteActivitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFavoriteActivitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetFavoriteActivitiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetFavoriteActivitiesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetFavoriteActivitiesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFavoriteActivitiesOK creates a GetFavoriteActivitiesOK with default headers values
func NewGetFavoriteActivitiesOK() *GetFavoriteActivitiesOK {
	return &GetFavoriteActivitiesOK{}
}

/*GetFavoriteActivitiesOK handles this case with default header values.

A successful request.
*/
type GetFavoriteActivitiesOK struct {
}

func (o *GetFavoriteActivitiesOK) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities/favorite.json][%d] getFavoriteActivitiesOK ", 200)
}

func (o *GetFavoriteActivitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFavoriteActivitiesBadRequest creates a GetFavoriteActivitiesBadRequest with default headers values
func NewGetFavoriteActivitiesBadRequest() *GetFavoriteActivitiesBadRequest {
	return &GetFavoriteActivitiesBadRequest{}
}

/*GetFavoriteActivitiesBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type GetFavoriteActivitiesBadRequest struct {
}

func (o *GetFavoriteActivitiesBadRequest) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities/favorite.json][%d] getFavoriteActivitiesBadRequest ", 400)
}

func (o *GetFavoriteActivitiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFavoriteActivitiesUnauthorized creates a GetFavoriteActivitiesUnauthorized with default headers values
func NewGetFavoriteActivitiesUnauthorized() *GetFavoriteActivitiesUnauthorized {
	return &GetFavoriteActivitiesUnauthorized{}
}

/*GetFavoriteActivitiesUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type GetFavoriteActivitiesUnauthorized struct {
}

func (o *GetFavoriteActivitiesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities/favorite.json][%d] getFavoriteActivitiesUnauthorized ", 401)
}

func (o *GetFavoriteActivitiesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFavoriteActivitiesConflict creates a GetFavoriteActivitiesConflict with default headers values
func NewGetFavoriteActivitiesConflict() *GetFavoriteActivitiesConflict {
	return &GetFavoriteActivitiesConflict{}
}

/*GetFavoriteActivitiesConflict handles this case with default header values.

Returned if the given user is already subscribed to this stream using a different subscription ID, OR if the given subscription ID is already used to identify a subscription to a different stream.
*/
type GetFavoriteActivitiesConflict struct {
}

func (o *GetFavoriteActivitiesConflict) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities/favorite.json][%d] getFavoriteActivitiesConflict ", 409)
}

func (o *GetFavoriteActivitiesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
