// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AddActivitiesLogReader is a Reader for the AddActivitiesLog structure.
type AddActivitiesLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddActivitiesLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddActivitiesLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddActivitiesLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddActivitiesLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddActivitiesLogConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddActivitiesLogOK creates a AddActivitiesLogOK with default headers values
func NewAddActivitiesLogOK() *AddActivitiesLogOK {
	return &AddActivitiesLogOK{}
}

/*AddActivitiesLogOK handles this case with default header values.

A successful request.
*/
type AddActivitiesLogOK struct {
}

func (o *AddActivitiesLogOK) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities.json][%d] addActivitiesLogOK ", 200)
}

func (o *AddActivitiesLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddActivitiesLogBadRequest creates a AddActivitiesLogBadRequest with default headers values
func NewAddActivitiesLogBadRequest() *AddActivitiesLogBadRequest {
	return &AddActivitiesLogBadRequest{}
}

/*AddActivitiesLogBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type AddActivitiesLogBadRequest struct {
}

func (o *AddActivitiesLogBadRequest) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities.json][%d] addActivitiesLogBadRequest ", 400)
}

func (o *AddActivitiesLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddActivitiesLogUnauthorized creates a AddActivitiesLogUnauthorized with default headers values
func NewAddActivitiesLogUnauthorized() *AddActivitiesLogUnauthorized {
	return &AddActivitiesLogUnauthorized{}
}

/*AddActivitiesLogUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type AddActivitiesLogUnauthorized struct {
}

func (o *AddActivitiesLogUnauthorized) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities.json][%d] addActivitiesLogUnauthorized ", 401)
}

func (o *AddActivitiesLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddActivitiesLogConflict creates a AddActivitiesLogConflict with default headers values
func NewAddActivitiesLogConflict() *AddActivitiesLogConflict {
	return &AddActivitiesLogConflict{}
}

/*AddActivitiesLogConflict handles this case with default header values.

Returned if the given user is already subscribed to this stream using a different subscription ID, OR if the given subscription ID is already used to identify a subscription to a different stream.
*/
type AddActivitiesLogConflict struct {
}

func (o *AddActivitiesLogConflict) Error() string {
	return fmt.Sprintf("[POST /1/user/-/activities.json][%d] addActivitiesLogConflict ", 409)
}

func (o *AddActivitiesLogConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
