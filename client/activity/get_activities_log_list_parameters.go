// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetActivitiesLogListParams creates a new GetActivitiesLogListParams object
// with the default values initialized.
func NewGetActivitiesLogListParams() *GetActivitiesLogListParams {
	var (
		offsetDefault = int64("0")
	)
	return &GetActivitiesLogListParams{
		Offset: offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetActivitiesLogListParamsWithTimeout creates a new GetActivitiesLogListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetActivitiesLogListParamsWithTimeout(timeout time.Duration) *GetActivitiesLogListParams {
	var (
		offsetDefault = int64("0")
	)
	return &GetActivitiesLogListParams{
		Offset: offsetDefault,

		timeout: timeout,
	}
}

// NewGetActivitiesLogListParamsWithContext creates a new GetActivitiesLogListParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetActivitiesLogListParamsWithContext(ctx context.Context) *GetActivitiesLogListParams {
	var (
		offsetDefault = int64("0")
	)
	return &GetActivitiesLogListParams{
		Offset: offsetDefault,

		Context: ctx,
	}
}

// NewGetActivitiesLogListParamsWithHTTPClient creates a new GetActivitiesLogListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetActivitiesLogListParamsWithHTTPClient(client *http.Client) *GetActivitiesLogListParams {
	var (
		offsetDefault = int64("0")
	)
	return &GetActivitiesLogListParams{
		Offset:     offsetDefault,
		HTTPClient: client,
	}
}

/*GetActivitiesLogListParams contains all the parameters to send to the API endpoint
for the get activities log list operation typically these are written to a http.Request
*/
type GetActivitiesLogListParams struct {

	/*AfterDate
	  The date in the format yyyy-MM-ddTHH:mm:ss.

	*/
	AfterDate *strfmt.Date
	/*BeforeDate
	  The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate should be specified.

	*/
	BeforeDate *strfmt.Date
	/*Limit
	  The maximum number of entries returned (maximum;100).

	*/
	Limit int64
	/*Offset
	  The offset number of entries.

	*/
	Offset int64
	/*Sort
	  The sort order of entries by date asc (ascending) or desc (descending).

	*/
	Sort string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get activities log list params
func (o *GetActivitiesLogListParams) WithTimeout(timeout time.Duration) *GetActivitiesLogListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get activities log list params
func (o *GetActivitiesLogListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get activities log list params
func (o *GetActivitiesLogListParams) WithContext(ctx context.Context) *GetActivitiesLogListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get activities log list params
func (o *GetActivitiesLogListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get activities log list params
func (o *GetActivitiesLogListParams) WithHTTPClient(client *http.Client) *GetActivitiesLogListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get activities log list params
func (o *GetActivitiesLogListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterDate adds the afterDate to the get activities log list params
func (o *GetActivitiesLogListParams) WithAfterDate(afterDate *strfmt.Date) *GetActivitiesLogListParams {
	o.SetAfterDate(afterDate)
	return o
}

// SetAfterDate adds the afterDate to the get activities log list params
func (o *GetActivitiesLogListParams) SetAfterDate(afterDate *strfmt.Date) {
	o.AfterDate = afterDate
}

// WithBeforeDate adds the beforeDate to the get activities log list params
func (o *GetActivitiesLogListParams) WithBeforeDate(beforeDate *strfmt.Date) *GetActivitiesLogListParams {
	o.SetBeforeDate(beforeDate)
	return o
}

// SetBeforeDate adds the beforeDate to the get activities log list params
func (o *GetActivitiesLogListParams) SetBeforeDate(beforeDate *strfmt.Date) {
	o.BeforeDate = beforeDate
}

// WithLimit adds the limit to the get activities log list params
func (o *GetActivitiesLogListParams) WithLimit(limit int64) *GetActivitiesLogListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get activities log list params
func (o *GetActivitiesLogListParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get activities log list params
func (o *GetActivitiesLogListParams) WithOffset(offset int64) *GetActivitiesLogListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get activities log list params
func (o *GetActivitiesLogListParams) SetOffset(offset int64) {
	o.Offset = offset
}

// WithSort adds the sort to the get activities log list params
func (o *GetActivitiesLogListParams) WithSort(sort string) *GetActivitiesLogListParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get activities log list params
func (o *GetActivitiesLogListParams) SetSort(sort string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetActivitiesLogListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterDate != nil {

		// query param afterDate
		var qrAfterDate strfmt.Date
		if o.AfterDate != nil {
			qrAfterDate = *o.AfterDate
		}
		qAfterDate := qrAfterDate.String()
		if qAfterDate != "" {
			if err := r.SetQueryParam("afterDate", qAfterDate); err != nil {
				return err
			}
		}

	}

	if o.BeforeDate != nil {

		// query param beforeDate
		var qrBeforeDate strfmt.Date
		if o.BeforeDate != nil {
			qrBeforeDate = *o.BeforeDate
		}
		qBeforeDate := qrBeforeDate.String()
		if qBeforeDate != "" {
			if err := r.SetQueryParam("beforeDate", qBeforeDate); err != nil {
				return err
			}
		}

	}

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt64(qrLimit)
	if qLimit != "" {
		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	// query param offset
	qrOffset := o.Offset
	qOffset := swag.FormatInt64(qrOffset)
	if qOffset != "" {
		if err := r.SetQueryParam("offset", qOffset); err != nil {
			return err
		}
	}

	// query param sort
	qrSort := o.Sort
	qSort := qrSort
	if qSort != "" {
		if err := r.SetQueryParam("sort", qSort); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
