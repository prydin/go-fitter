// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetActivitiesTCXParams creates a new GetActivitiesTCXParams object
// with the default values initialized.
func NewGetActivitiesTCXParams() *GetActivitiesTCXParams {
	var ()
	return &GetActivitiesTCXParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetActivitiesTCXParamsWithTimeout creates a new GetActivitiesTCXParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetActivitiesTCXParamsWithTimeout(timeout time.Duration) *GetActivitiesTCXParams {
	var ()
	return &GetActivitiesTCXParams{

		timeout: timeout,
	}
}

// NewGetActivitiesTCXParamsWithContext creates a new GetActivitiesTCXParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetActivitiesTCXParamsWithContext(ctx context.Context) *GetActivitiesTCXParams {
	var ()
	return &GetActivitiesTCXParams{

		Context: ctx,
	}
}

// NewGetActivitiesTCXParamsWithHTTPClient creates a new GetActivitiesTCXParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetActivitiesTCXParamsWithHTTPClient(client *http.Client) *GetActivitiesTCXParams {
	var ()
	return &GetActivitiesTCXParams{
		HTTPClient: client,
	}
}

/*GetActivitiesTCXParams contains all the parameters to send to the API endpoint
for the get activities t c x operation typically these are written to a http.Request
*/
type GetActivitiesTCXParams struct {

	/*IncludePartialTCX
	  Include TCX points regardless of GPS data being present

	*/
	IncludePartialTCX *bool
	/*LogID
	  The activity's log ID.

	*/
	LogID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get activities t c x params
func (o *GetActivitiesTCXParams) WithTimeout(timeout time.Duration) *GetActivitiesTCXParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get activities t c x params
func (o *GetActivitiesTCXParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get activities t c x params
func (o *GetActivitiesTCXParams) WithContext(ctx context.Context) *GetActivitiesTCXParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get activities t c x params
func (o *GetActivitiesTCXParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get activities t c x params
func (o *GetActivitiesTCXParams) WithHTTPClient(client *http.Client) *GetActivitiesTCXParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get activities t c x params
func (o *GetActivitiesTCXParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludePartialTCX adds the includePartialTCX to the get activities t c x params
func (o *GetActivitiesTCXParams) WithIncludePartialTCX(includePartialTCX *bool) *GetActivitiesTCXParams {
	o.SetIncludePartialTCX(includePartialTCX)
	return o
}

// SetIncludePartialTCX adds the includePartialTCX to the get activities t c x params
func (o *GetActivitiesTCXParams) SetIncludePartialTCX(includePartialTCX *bool) {
	o.IncludePartialTCX = includePartialTCX
}

// WithLogID adds the logID to the get activities t c x params
func (o *GetActivitiesTCXParams) WithLogID(logID string) *GetActivitiesTCXParams {
	o.SetLogID(logID)
	return o
}

// SetLogID adds the logId to the get activities t c x params
func (o *GetActivitiesTCXParams) SetLogID(logID string) {
	o.LogID = logID
}

// WriteToRequest writes these params to a swagger request
func (o *GetActivitiesTCXParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludePartialTCX != nil {

		// query param includePartialTCX
		var qrIncludePartialTCX bool
		if o.IncludePartialTCX != nil {
			qrIncludePartialTCX = *o.IncludePartialTCX
		}
		qIncludePartialTCX := swag.FormatBool(qrIncludePartialTCX)
		if qIncludePartialTCX != "" {
			if err := r.SetQueryParam("includePartialTCX", qIncludePartialTCX); err != nil {
				return err
			}
		}

	}

	// path param log-id
	if err := r.SetPathParam("log-id", o.LogID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
