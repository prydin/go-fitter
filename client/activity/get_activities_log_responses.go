// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetActivitiesLogReader is a Reader for the GetActivitiesLog structure.
type GetActivitiesLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetActivitiesLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetActivitiesLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetActivitiesLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetActivitiesLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetActivitiesLogConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetActivitiesLogOK creates a GetActivitiesLogOK with default headers values
func NewGetActivitiesLogOK() *GetActivitiesLogOK {
	return &GetActivitiesLogOK{}
}

/*GetActivitiesLogOK handles this case with default header values.

A successful request.
*/
type GetActivitiesLogOK struct {
}

func (o *GetActivitiesLogOK) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities.json][%d] getActivitiesLogOK ", 200)
}

func (o *GetActivitiesLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetActivitiesLogBadRequest creates a GetActivitiesLogBadRequest with default headers values
func NewGetActivitiesLogBadRequest() *GetActivitiesLogBadRequest {
	return &GetActivitiesLogBadRequest{}
}

/*GetActivitiesLogBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type GetActivitiesLogBadRequest struct {
}

func (o *GetActivitiesLogBadRequest) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities.json][%d] getActivitiesLogBadRequest ", 400)
}

func (o *GetActivitiesLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetActivitiesLogUnauthorized creates a GetActivitiesLogUnauthorized with default headers values
func NewGetActivitiesLogUnauthorized() *GetActivitiesLogUnauthorized {
	return &GetActivitiesLogUnauthorized{}
}

/*GetActivitiesLogUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type GetActivitiesLogUnauthorized struct {
}

func (o *GetActivitiesLogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities.json][%d] getActivitiesLogUnauthorized ", 401)
}

func (o *GetActivitiesLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetActivitiesLogConflict creates a GetActivitiesLogConflict with default headers values
func NewGetActivitiesLogConflict() *GetActivitiesLogConflict {
	return &GetActivitiesLogConflict{}
}

/*GetActivitiesLogConflict handles this case with default header values.

Returned if the given user is already subscribed to this stream using a different subscription ID, OR if the given subscription ID is already used to identify a subscription to a different stream.
*/
type GetActivitiesLogConflict struct {
}

func (o *GetActivitiesLogConflict) Error() string {
	return fmt.Sprintf("[GET /1/user/-/activities.json][%d] getActivitiesLogConflict ", 409)
}

func (o *GetActivitiesLogConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
