// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AddWaterLogReader is a Reader for the AddWaterLog structure.
type AddWaterLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddWaterLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddWaterLogCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddWaterLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddWaterLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddWaterLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddWaterLogCreated creates a AddWaterLogCreated with default headers values
func NewAddWaterLogCreated() *AddWaterLogCreated {
	return &AddWaterLogCreated{}
}

/*AddWaterLogCreated handles this case with default header values.

The request has been fulfilled and resulted in a new resource being created.
*/
type AddWaterLogCreated struct {
}

func (o *AddWaterLogCreated) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water.json][%d] addWaterLogCreated ", 201)
}

func (o *AddWaterLogCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddWaterLogBadRequest creates a AddWaterLogBadRequest with default headers values
func NewAddWaterLogBadRequest() *AddWaterLogBadRequest {
	return &AddWaterLogBadRequest{}
}

/*AddWaterLogBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type AddWaterLogBadRequest struct {
}

func (o *AddWaterLogBadRequest) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water.json][%d] addWaterLogBadRequest ", 400)
}

func (o *AddWaterLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddWaterLogUnauthorized creates a AddWaterLogUnauthorized with default headers values
func NewAddWaterLogUnauthorized() *AddWaterLogUnauthorized {
	return &AddWaterLogUnauthorized{}
}

/*AddWaterLogUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type AddWaterLogUnauthorized struct {
}

func (o *AddWaterLogUnauthorized) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water.json][%d] addWaterLogUnauthorized ", 401)
}

func (o *AddWaterLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddWaterLogForbidden creates a AddWaterLogForbidden with default headers values
func NewAddWaterLogForbidden() *AddWaterLogForbidden {
	return &AddWaterLogForbidden{}
}

/*AddWaterLogForbidden handles this case with default header values.

The server understood the request, but is refusing to fulfill it.
*/
type AddWaterLogForbidden struct {
}

func (o *AddWaterLogForbidden) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water.json][%d] addWaterLogForbidden ", 403)
}

func (o *AddWaterLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
