// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateMealParams creates a new UpdateMealParams object
// with the default values initialized.
func NewUpdateMealParams() *UpdateMealParams {
	var ()
	return &UpdateMealParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateMealParamsWithTimeout creates a new UpdateMealParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateMealParamsWithTimeout(timeout time.Duration) *UpdateMealParams {
	var ()
	return &UpdateMealParams{

		timeout: timeout,
	}
}

// NewUpdateMealParamsWithContext creates a new UpdateMealParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateMealParamsWithContext(ctx context.Context) *UpdateMealParams {
	var ()
	return &UpdateMealParams{

		Context: ctx,
	}
}

// NewUpdateMealParamsWithHTTPClient creates a new UpdateMealParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateMealParamsWithHTTPClient(client *http.Client) *UpdateMealParams {
	var ()
	return &UpdateMealParams{
		HTTPClient: client,
	}
}

/*UpdateMealParams contains all the parameters to send to the API endpoint
for the update meal operation typically these are written to a http.Request
*/
type UpdateMealParams struct {

	/*Description
	  Short description of the meal.

	*/
	Description string
	/*Amount
	  Amount consumed; in the format X.XX, in the specified unitId.

	*/
	Amount string
	/*FoodID
	  ID of the food to be included in the meal.

	*/
	FoodID string
	/*MealID
	  Id of the meal to edit.

	*/
	MealID string
	/*Name
	  Name of the meal.

	*/
	Name string
	/*UnitID
	  ID of units used. Typically retrieved via a previous call to Get Food Logs, Search Foods, or Get Food Units.

	*/
	UnitID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update meal params
func (o *UpdateMealParams) WithTimeout(timeout time.Duration) *UpdateMealParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update meal params
func (o *UpdateMealParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update meal params
func (o *UpdateMealParams) WithContext(ctx context.Context) *UpdateMealParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update meal params
func (o *UpdateMealParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update meal params
func (o *UpdateMealParams) WithHTTPClient(client *http.Client) *UpdateMealParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update meal params
func (o *UpdateMealParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the update meal params
func (o *UpdateMealParams) WithDescription(description string) *UpdateMealParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the update meal params
func (o *UpdateMealParams) SetDescription(description string) {
	o.Description = description
}

// WithAmount adds the amount to the update meal params
func (o *UpdateMealParams) WithAmount(amount string) *UpdateMealParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the update meal params
func (o *UpdateMealParams) SetAmount(amount string) {
	o.Amount = amount
}

// WithFoodID adds the foodID to the update meal params
func (o *UpdateMealParams) WithFoodID(foodID string) *UpdateMealParams {
	o.SetFoodID(foodID)
	return o
}

// SetFoodID adds the foodId to the update meal params
func (o *UpdateMealParams) SetFoodID(foodID string) {
	o.FoodID = foodID
}

// WithMealID adds the mealID to the update meal params
func (o *UpdateMealParams) WithMealID(mealID string) *UpdateMealParams {
	o.SetMealID(mealID)
	return o
}

// SetMealID adds the mealId to the update meal params
func (o *UpdateMealParams) SetMealID(mealID string) {
	o.MealID = mealID
}

// WithName adds the name to the update meal params
func (o *UpdateMealParams) WithName(name string) *UpdateMealParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the update meal params
func (o *UpdateMealParams) SetName(name string) {
	o.Name = name
}

// WithUnitID adds the unitID to the update meal params
func (o *UpdateMealParams) WithUnitID(unitID string) *UpdateMealParams {
	o.SetUnitID(unitID)
	return o
}

// SetUnitID adds the unitId to the update meal params
func (o *UpdateMealParams) SetUnitID(unitID string) {
	o.UnitID = unitID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateMealParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param Description
	qrDescription := o.Description
	qDescription := qrDescription
	if qDescription != "" {
		if err := r.SetQueryParam("Description", qDescription); err != nil {
			return err
		}
	}

	// query param amount
	qrAmount := o.Amount
	qAmount := qrAmount
	if qAmount != "" {
		if err := r.SetQueryParam("amount", qAmount); err != nil {
			return err
		}
	}

	// query param foodId
	qrFoodID := o.FoodID
	qFoodID := qrFoodID
	if qFoodID != "" {
		if err := r.SetQueryParam("foodId", qFoodID); err != nil {
			return err
		}
	}

	// path param meal-id
	if err := r.SetPathParam("meal-id", o.MealID); err != nil {
		return err
	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	// query param unitId
	qrUnitID := o.UnitID
	qUnitID := qrUnitID
	if qUnitID != "" {
		if err := r.SetQueryParam("unitId", qUnitID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
