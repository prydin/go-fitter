// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddUpdateWaterGoalParams creates a new AddUpdateWaterGoalParams object
// with the default values initialized.
func NewAddUpdateWaterGoalParams() *AddUpdateWaterGoalParams {
	var ()
	return &AddUpdateWaterGoalParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddUpdateWaterGoalParamsWithTimeout creates a new AddUpdateWaterGoalParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddUpdateWaterGoalParamsWithTimeout(timeout time.Duration) *AddUpdateWaterGoalParams {
	var ()
	return &AddUpdateWaterGoalParams{

		timeout: timeout,
	}
}

// NewAddUpdateWaterGoalParamsWithContext creates a new AddUpdateWaterGoalParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddUpdateWaterGoalParamsWithContext(ctx context.Context) *AddUpdateWaterGoalParams {
	var ()
	return &AddUpdateWaterGoalParams{

		Context: ctx,
	}
}

// NewAddUpdateWaterGoalParamsWithHTTPClient creates a new AddUpdateWaterGoalParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddUpdateWaterGoalParamsWithHTTPClient(client *http.Client) *AddUpdateWaterGoalParams {
	var ()
	return &AddUpdateWaterGoalParams{
		HTTPClient: client,
	}
}

/*AddUpdateWaterGoalParams contains all the parameters to send to the API endpoint
for the add update water goal operation typically these are written to a http.Request
*/
type AddUpdateWaterGoalParams struct {

	/*Target
	  The target water goal in the format X.X is set in unit based on locale.

	*/
	Target int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add update water goal params
func (o *AddUpdateWaterGoalParams) WithTimeout(timeout time.Duration) *AddUpdateWaterGoalParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add update water goal params
func (o *AddUpdateWaterGoalParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add update water goal params
func (o *AddUpdateWaterGoalParams) WithContext(ctx context.Context) *AddUpdateWaterGoalParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add update water goal params
func (o *AddUpdateWaterGoalParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add update water goal params
func (o *AddUpdateWaterGoalParams) WithHTTPClient(client *http.Client) *AddUpdateWaterGoalParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add update water goal params
func (o *AddUpdateWaterGoalParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTarget adds the target to the add update water goal params
func (o *AddUpdateWaterGoalParams) WithTarget(target int64) *AddUpdateWaterGoalParams {
	o.SetTarget(target)
	return o
}

// SetTarget adds the target to the add update water goal params
func (o *AddUpdateWaterGoalParams) SetTarget(target int64) {
	o.Target = target
}

// WriteToRequest writes these params to a swagger request
func (o *AddUpdateWaterGoalParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param target
	qrTarget := o.Target
	qTarget := swag.FormatInt64(qrTarget)
	if qTarget != "" {
		if err := r.SetQueryParam("target", qTarget); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
