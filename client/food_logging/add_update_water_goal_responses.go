// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AddUpdateWaterGoalReader is a Reader for the AddUpdateWaterGoal structure.
type AddUpdateWaterGoalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUpdateWaterGoalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddUpdateWaterGoalCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddUpdateWaterGoalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddUpdateWaterGoalUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddUpdateWaterGoalForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddUpdateWaterGoalCreated creates a AddUpdateWaterGoalCreated with default headers values
func NewAddUpdateWaterGoalCreated() *AddUpdateWaterGoalCreated {
	return &AddUpdateWaterGoalCreated{}
}

/*AddUpdateWaterGoalCreated handles this case with default header values.

The request has been fulfilled and resulted in a new resource being created.
*/
type AddUpdateWaterGoalCreated struct {
}

func (o *AddUpdateWaterGoalCreated) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water/goal.json][%d] addUpdateWaterGoalCreated ", 201)
}

func (o *AddUpdateWaterGoalCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUpdateWaterGoalBadRequest creates a AddUpdateWaterGoalBadRequest with default headers values
func NewAddUpdateWaterGoalBadRequest() *AddUpdateWaterGoalBadRequest {
	return &AddUpdateWaterGoalBadRequest{}
}

/*AddUpdateWaterGoalBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type AddUpdateWaterGoalBadRequest struct {
}

func (o *AddUpdateWaterGoalBadRequest) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water/goal.json][%d] addUpdateWaterGoalBadRequest ", 400)
}

func (o *AddUpdateWaterGoalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUpdateWaterGoalUnauthorized creates a AddUpdateWaterGoalUnauthorized with default headers values
func NewAddUpdateWaterGoalUnauthorized() *AddUpdateWaterGoalUnauthorized {
	return &AddUpdateWaterGoalUnauthorized{}
}

/*AddUpdateWaterGoalUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type AddUpdateWaterGoalUnauthorized struct {
}

func (o *AddUpdateWaterGoalUnauthorized) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water/goal.json][%d] addUpdateWaterGoalUnauthorized ", 401)
}

func (o *AddUpdateWaterGoalUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUpdateWaterGoalForbidden creates a AddUpdateWaterGoalForbidden with default headers values
func NewAddUpdateWaterGoalForbidden() *AddUpdateWaterGoalForbidden {
	return &AddUpdateWaterGoalForbidden{}
}

/*AddUpdateWaterGoalForbidden handles this case with default header values.

The server understood the request, but is refusing to fulfill it.
*/
type AddUpdateWaterGoalForbidden struct {
}

func (o *AddUpdateWaterGoalForbidden) Error() string {
	return fmt.Sprintf("[POST /1/user/-/foods/log/water/goal.json][%d] addUpdateWaterGoalForbidden ", 403)
}

func (o *AddUpdateWaterGoalForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
