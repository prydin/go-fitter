// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AddMealReader is a Reader for the AddMeal structure.
type AddMealReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddMealReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddMealOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddMealBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddMealUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddMealForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddMealOK creates a AddMealOK with default headers values
func NewAddMealOK() *AddMealOK {
	return &AddMealOK{}
}

/*AddMealOK handles this case with default header values.

Successful request.
*/
type AddMealOK struct {
}

func (o *AddMealOK) Error() string {
	return fmt.Sprintf("[POST /1/user/-/meals.json][%d] addMealOK ", 200)
}

func (o *AddMealOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMealBadRequest creates a AddMealBadRequest with default headers values
func NewAddMealBadRequest() *AddMealBadRequest {
	return &AddMealBadRequest{}
}

/*AddMealBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type AddMealBadRequest struct {
}

func (o *AddMealBadRequest) Error() string {
	return fmt.Sprintf("[POST /1/user/-/meals.json][%d] addMealBadRequest ", 400)
}

func (o *AddMealBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMealUnauthorized creates a AddMealUnauthorized with default headers values
func NewAddMealUnauthorized() *AddMealUnauthorized {
	return &AddMealUnauthorized{}
}

/*AddMealUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type AddMealUnauthorized struct {
}

func (o *AddMealUnauthorized) Error() string {
	return fmt.Sprintf("[POST /1/user/-/meals.json][%d] addMealUnauthorized ", 401)
}

func (o *AddMealUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMealForbidden creates a AddMealForbidden with default headers values
func NewAddMealForbidden() *AddMealForbidden {
	return &AddMealForbidden{}
}

/*AddMealForbidden handles this case with default header values.

The server understood the request, but is refusing to fulfill it.
*/
type AddMealForbidden struct {
}

func (o *AddMealForbidden) Error() string {
	return fmt.Sprintf("[POST /1/user/-/meals.json][%d] addMealForbidden ", 403)
}

func (o *AddMealForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
