// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetMealsReader is a Reader for the GetMeals structure.
type GetMealsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMealsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMealsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetMealsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetMealsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetMealsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMealsOK creates a GetMealsOK with default headers values
func NewGetMealsOK() *GetMealsOK {
	return &GetMealsOK{}
}

/*GetMealsOK handles this case with default header values.

Successful request.
*/
type GetMealsOK struct {
}

func (o *GetMealsOK) Error() string {
	return fmt.Sprintf("[GET /1/user/-/meals.json][%d] getMealsOK ", 200)
}

func (o *GetMealsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMealsBadRequest creates a GetMealsBadRequest with default headers values
func NewGetMealsBadRequest() *GetMealsBadRequest {
	return &GetMealsBadRequest{}
}

/*GetMealsBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type GetMealsBadRequest struct {
}

func (o *GetMealsBadRequest) Error() string {
	return fmt.Sprintf("[GET /1/user/-/meals.json][%d] getMealsBadRequest ", 400)
}

func (o *GetMealsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMealsUnauthorized creates a GetMealsUnauthorized with default headers values
func NewGetMealsUnauthorized() *GetMealsUnauthorized {
	return &GetMealsUnauthorized{}
}

/*GetMealsUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type GetMealsUnauthorized struct {
}

func (o *GetMealsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /1/user/-/meals.json][%d] getMealsUnauthorized ", 401)
}

func (o *GetMealsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMealsForbidden creates a GetMealsForbidden with default headers values
func NewGetMealsForbidden() *GetMealsForbidden {
	return &GetMealsForbidden{}
}

/*GetMealsForbidden handles this case with default header values.

The server understood the request, but is refusing to fulfill it.
*/
type GetMealsForbidden struct {
}

func (o *GetMealsForbidden) Error() string {
	return fmt.Sprintf("[GET /1/user/-/meals.json][%d] getMealsForbidden ", 403)
}

func (o *GetMealsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
