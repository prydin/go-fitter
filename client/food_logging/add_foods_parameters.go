// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddFoodsParams creates a new AddFoodsParams object
// with the default values initialized.
func NewAddFoodsParams() *AddFoodsParams {
	var ()
	return &AddFoodsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddFoodsParamsWithTimeout creates a new AddFoodsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddFoodsParamsWithTimeout(timeout time.Duration) *AddFoodsParams {
	var ()
	return &AddFoodsParams{

		timeout: timeout,
	}
}

// NewAddFoodsParamsWithContext creates a new AddFoodsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddFoodsParamsWithContext(ctx context.Context) *AddFoodsParams {
	var ()
	return &AddFoodsParams{

		Context: ctx,
	}
}

// NewAddFoodsParamsWithHTTPClient creates a new AddFoodsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddFoodsParamsWithHTTPClient(client *http.Client) *AddFoodsParams {
	var ()
	return &AddFoodsParams{
		HTTPClient: client,
	}
}

/*AddFoodsParams contains all the parameters to send to the API endpoint
for the add foods operation typically these are written to a http.Request
*/
type AddFoodsParams struct {

	/*Calories
	  The calories in the default serving size.

	*/
	Calories string
	/*DefaultFoodMeasurementUnitID
	  The ID of the default measurement unit. Full list of units can be retrieved via the Get Food Units endpoint.

	*/
	DefaultFoodMeasurementUnitID string
	/*DefaultServingSize
	  The size of the default serving. Nutrition values should be provided for this serving size.

	*/
	DefaultServingSize string
	/*Description
	  The description of the food.

	*/
	Description *string
	/*FormType
	  Form type; LIQUID or DRY.

	*/
	FormType *string
	/*Name
	  The food name.

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add foods params
func (o *AddFoodsParams) WithTimeout(timeout time.Duration) *AddFoodsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add foods params
func (o *AddFoodsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add foods params
func (o *AddFoodsParams) WithContext(ctx context.Context) *AddFoodsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add foods params
func (o *AddFoodsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add foods params
func (o *AddFoodsParams) WithHTTPClient(client *http.Client) *AddFoodsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add foods params
func (o *AddFoodsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCalories adds the calories to the add foods params
func (o *AddFoodsParams) WithCalories(calories string) *AddFoodsParams {
	o.SetCalories(calories)
	return o
}

// SetCalories adds the calories to the add foods params
func (o *AddFoodsParams) SetCalories(calories string) {
	o.Calories = calories
}

// WithDefaultFoodMeasurementUnitID adds the defaultFoodMeasurementUnitID to the add foods params
func (o *AddFoodsParams) WithDefaultFoodMeasurementUnitID(defaultFoodMeasurementUnitID string) *AddFoodsParams {
	o.SetDefaultFoodMeasurementUnitID(defaultFoodMeasurementUnitID)
	return o
}

// SetDefaultFoodMeasurementUnitID adds the defaultFoodMeasurementUnitId to the add foods params
func (o *AddFoodsParams) SetDefaultFoodMeasurementUnitID(defaultFoodMeasurementUnitID string) {
	o.DefaultFoodMeasurementUnitID = defaultFoodMeasurementUnitID
}

// WithDefaultServingSize adds the defaultServingSize to the add foods params
func (o *AddFoodsParams) WithDefaultServingSize(defaultServingSize string) *AddFoodsParams {
	o.SetDefaultServingSize(defaultServingSize)
	return o
}

// SetDefaultServingSize adds the defaultServingSize to the add foods params
func (o *AddFoodsParams) SetDefaultServingSize(defaultServingSize string) {
	o.DefaultServingSize = defaultServingSize
}

// WithDescription adds the description to the add foods params
func (o *AddFoodsParams) WithDescription(description *string) *AddFoodsParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the add foods params
func (o *AddFoodsParams) SetDescription(description *string) {
	o.Description = description
}

// WithFormType adds the formType to the add foods params
func (o *AddFoodsParams) WithFormType(formType *string) *AddFoodsParams {
	o.SetFormType(formType)
	return o
}

// SetFormType adds the formType to the add foods params
func (o *AddFoodsParams) SetFormType(formType *string) {
	o.FormType = formType
}

// WithName adds the name to the add foods params
func (o *AddFoodsParams) WithName(name string) *AddFoodsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the add foods params
func (o *AddFoodsParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *AddFoodsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param calories
	qrCalories := o.Calories
	qCalories := qrCalories
	if qCalories != "" {
		if err := r.SetQueryParam("calories", qCalories); err != nil {
			return err
		}
	}

	// query param defaultFoodMeasurementUnitId
	qrDefaultFoodMeasurementUnitID := o.DefaultFoodMeasurementUnitID
	qDefaultFoodMeasurementUnitID := qrDefaultFoodMeasurementUnitID
	if qDefaultFoodMeasurementUnitID != "" {
		if err := r.SetQueryParam("defaultFoodMeasurementUnitId", qDefaultFoodMeasurementUnitID); err != nil {
			return err
		}
	}

	// query param defaultServingSize
	qrDefaultServingSize := o.DefaultServingSize
	qDefaultServingSize := qrDefaultServingSize
	if qDefaultServingSize != "" {
		if err := r.SetQueryParam("defaultServingSize", qDefaultServingSize); err != nil {
			return err
		}
	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.FormType != nil {

		// query param formType
		var qrFormType string
		if o.FormType != nil {
			qrFormType = *o.FormType
		}
		qFormType := qrFormType
		if qFormType != "" {
			if err := r.SetQueryParam("formType", qFormType); err != nil {
				return err
			}
		}

	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
