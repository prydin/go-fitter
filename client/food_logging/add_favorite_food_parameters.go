// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddFavoriteFoodParams creates a new AddFavoriteFoodParams object
// with the default values initialized.
func NewAddFavoriteFoodParams() *AddFavoriteFoodParams {
	var ()
	return &AddFavoriteFoodParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddFavoriteFoodParamsWithTimeout creates a new AddFavoriteFoodParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddFavoriteFoodParamsWithTimeout(timeout time.Duration) *AddFavoriteFoodParams {
	var ()
	return &AddFavoriteFoodParams{

		timeout: timeout,
	}
}

// NewAddFavoriteFoodParamsWithContext creates a new AddFavoriteFoodParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddFavoriteFoodParamsWithContext(ctx context.Context) *AddFavoriteFoodParams {
	var ()
	return &AddFavoriteFoodParams{

		Context: ctx,
	}
}

// NewAddFavoriteFoodParamsWithHTTPClient creates a new AddFavoriteFoodParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddFavoriteFoodParamsWithHTTPClient(client *http.Client) *AddFavoriteFoodParams {
	var ()
	return &AddFavoriteFoodParams{
		HTTPClient: client,
	}
}

/*AddFavoriteFoodParams contains all the parameters to send to the API endpoint
for the add favorite food operation typically these are written to a http.Request
*/
type AddFavoriteFoodParams struct {

	/*FoodID
	  The ID of the food to be added to user's favorites.

	*/
	FoodID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add favorite food params
func (o *AddFavoriteFoodParams) WithTimeout(timeout time.Duration) *AddFavoriteFoodParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add favorite food params
func (o *AddFavoriteFoodParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add favorite food params
func (o *AddFavoriteFoodParams) WithContext(ctx context.Context) *AddFavoriteFoodParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add favorite food params
func (o *AddFavoriteFoodParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add favorite food params
func (o *AddFavoriteFoodParams) WithHTTPClient(client *http.Client) *AddFavoriteFoodParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add favorite food params
func (o *AddFavoriteFoodParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFoodID adds the foodID to the add favorite food params
func (o *AddFavoriteFoodParams) WithFoodID(foodID string) *AddFavoriteFoodParams {
	o.SetFoodID(foodID)
	return o
}

// SetFoodID adds the foodId to the add favorite food params
func (o *AddFavoriteFoodParams) SetFoodID(foodID string) {
	o.FoodID = foodID
}

// WriteToRequest writes these params to a swagger request
func (o *AddFavoriteFoodParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param food-id
	if err := r.SetPathParam("food-id", o.FoodID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
