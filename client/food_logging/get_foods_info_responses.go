// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetFoodsInfoReader is a Reader for the GetFoodsInfo structure.
type GetFoodsInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFoodsInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFoodsInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetFoodsInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetFoodsInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetFoodsInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFoodsInfoOK creates a GetFoodsInfoOK with default headers values
func NewGetFoodsInfoOK() *GetFoodsInfoOK {
	return &GetFoodsInfoOK{}
}

/*GetFoodsInfoOK handles this case with default header values.

Successful request.
*/
type GetFoodsInfoOK struct {
}

func (o *GetFoodsInfoOK) Error() string {
	return fmt.Sprintf("[GET /1/foods/{food-id}.json][%d] getFoodsInfoOK ", 200)
}

func (o *GetFoodsInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFoodsInfoBadRequest creates a GetFoodsInfoBadRequest with default headers values
func NewGetFoodsInfoBadRequest() *GetFoodsInfoBadRequest {
	return &GetFoodsInfoBadRequest{}
}

/*GetFoodsInfoBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type GetFoodsInfoBadRequest struct {
}

func (o *GetFoodsInfoBadRequest) Error() string {
	return fmt.Sprintf("[GET /1/foods/{food-id}.json][%d] getFoodsInfoBadRequest ", 400)
}

func (o *GetFoodsInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFoodsInfoUnauthorized creates a GetFoodsInfoUnauthorized with default headers values
func NewGetFoodsInfoUnauthorized() *GetFoodsInfoUnauthorized {
	return &GetFoodsInfoUnauthorized{}
}

/*GetFoodsInfoUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type GetFoodsInfoUnauthorized struct {
}

func (o *GetFoodsInfoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /1/foods/{food-id}.json][%d] getFoodsInfoUnauthorized ", 401)
}

func (o *GetFoodsInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFoodsInfoForbidden creates a GetFoodsInfoForbidden with default headers values
func NewGetFoodsInfoForbidden() *GetFoodsInfoForbidden {
	return &GetFoodsInfoForbidden{}
}

/*GetFoodsInfoForbidden handles this case with default header values.

The server understood the request, but is refusing to fulfill it.
*/
type GetFoodsInfoForbidden struct {
}

func (o *GetFoodsInfoForbidden) Error() string {
	return fmt.Sprintf("[GET /1/foods/{food-id}.json][%d] getFoodsInfoForbidden ", 403)
}

func (o *GetFoodsInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
