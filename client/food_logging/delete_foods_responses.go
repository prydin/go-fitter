// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteFoodsReader is a Reader for the DeleteFoods structure.
type DeleteFoodsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFoodsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteFoodsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteFoodsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteFoodsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteFoodsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteFoodsNoContent creates a DeleteFoodsNoContent with default headers values
func NewDeleteFoodsNoContent() *DeleteFoodsNoContent {
	return &DeleteFoodsNoContent{}
}

/*DeleteFoodsNoContent handles this case with default header values.

The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation.
*/
type DeleteFoodsNoContent struct {
}

func (o *DeleteFoodsNoContent) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/foods/{food-id}.json][%d] deleteFoodsNoContent ", 204)
}

func (o *DeleteFoodsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFoodsBadRequest creates a DeleteFoodsBadRequest with default headers values
func NewDeleteFoodsBadRequest() *DeleteFoodsBadRequest {
	return &DeleteFoodsBadRequest{}
}

/*DeleteFoodsBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type DeleteFoodsBadRequest struct {
}

func (o *DeleteFoodsBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/foods/{food-id}.json][%d] deleteFoodsBadRequest ", 400)
}

func (o *DeleteFoodsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFoodsUnauthorized creates a DeleteFoodsUnauthorized with default headers values
func NewDeleteFoodsUnauthorized() *DeleteFoodsUnauthorized {
	return &DeleteFoodsUnauthorized{}
}

/*DeleteFoodsUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type DeleteFoodsUnauthorized struct {
}

func (o *DeleteFoodsUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/foods/{food-id}.json][%d] deleteFoodsUnauthorized ", 401)
}

func (o *DeleteFoodsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFoodsForbidden creates a DeleteFoodsForbidden with default headers values
func NewDeleteFoodsForbidden() *DeleteFoodsForbidden {
	return &DeleteFoodsForbidden{}
}

/*DeleteFoodsForbidden handles this case with default header values.

The server understood the request, but is refusing to fulfill it.
*/
type DeleteFoodsForbidden struct {
}

func (o *DeleteFoodsForbidden) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/foods/{food-id}.json][%d] deleteFoodsForbidden ", 403)
}

func (o *DeleteFoodsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
