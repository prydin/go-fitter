// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetWaterByDateReader is a Reader for the GetWaterByDate structure.
type GetWaterByDateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWaterByDateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetWaterByDateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetWaterByDateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetWaterByDateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetWaterByDateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetWaterByDateOK creates a GetWaterByDateOK with default headers values
func NewGetWaterByDateOK() *GetWaterByDateOK {
	return &GetWaterByDateOK{}
}

/*GetWaterByDateOK handles this case with default header values.

A successful request.
*/
type GetWaterByDateOK struct {
}

func (o *GetWaterByDateOK) Error() string {
	return fmt.Sprintf("[GET /1/user/-/foods/log/water/date/{date}.json][%d] getWaterByDateOK ", 200)
}

func (o *GetWaterByDateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWaterByDateBadRequest creates a GetWaterByDateBadRequest with default headers values
func NewGetWaterByDateBadRequest() *GetWaterByDateBadRequest {
	return &GetWaterByDateBadRequest{}
}

/*GetWaterByDateBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type GetWaterByDateBadRequest struct {
}

func (o *GetWaterByDateBadRequest) Error() string {
	return fmt.Sprintf("[GET /1/user/-/foods/log/water/date/{date}.json][%d] getWaterByDateBadRequest ", 400)
}

func (o *GetWaterByDateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWaterByDateUnauthorized creates a GetWaterByDateUnauthorized with default headers values
func NewGetWaterByDateUnauthorized() *GetWaterByDateUnauthorized {
	return &GetWaterByDateUnauthorized{}
}

/*GetWaterByDateUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type GetWaterByDateUnauthorized struct {
}

func (o *GetWaterByDateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /1/user/-/foods/log/water/date/{date}.json][%d] getWaterByDateUnauthorized ", 401)
}

func (o *GetWaterByDateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWaterByDateForbidden creates a GetWaterByDateForbidden with default headers values
func NewGetWaterByDateForbidden() *GetWaterByDateForbidden {
	return &GetWaterByDateForbidden{}
}

/*GetWaterByDateForbidden handles this case with default header values.

The server understood the request, but is refusing to fulfill it.
*/
type GetWaterByDateForbidden struct {
}

func (o *GetWaterByDateForbidden) Error() string {
	return fmt.Sprintf("[GET /1/user/-/foods/log/water/date/{date}.json][%d] getWaterByDateForbidden ", 403)
}

func (o *GetWaterByDateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
