// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddUpdateFoodsGoalParams creates a new AddUpdateFoodsGoalParams object
// with the default values initialized.
func NewAddUpdateFoodsGoalParams() *AddUpdateFoodsGoalParams {
	var ()
	return &AddUpdateFoodsGoalParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddUpdateFoodsGoalParamsWithTimeout creates a new AddUpdateFoodsGoalParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddUpdateFoodsGoalParamsWithTimeout(timeout time.Duration) *AddUpdateFoodsGoalParams {
	var ()
	return &AddUpdateFoodsGoalParams{

		timeout: timeout,
	}
}

// NewAddUpdateFoodsGoalParamsWithContext creates a new AddUpdateFoodsGoalParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddUpdateFoodsGoalParamsWithContext(ctx context.Context) *AddUpdateFoodsGoalParams {
	var ()
	return &AddUpdateFoodsGoalParams{

		Context: ctx,
	}
}

// NewAddUpdateFoodsGoalParamsWithHTTPClient creates a new AddUpdateFoodsGoalParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddUpdateFoodsGoalParamsWithHTTPClient(client *http.Client) *AddUpdateFoodsGoalParams {
	var ()
	return &AddUpdateFoodsGoalParams{
		HTTPClient: client,
	}
}

/*AddUpdateFoodsGoalParams contains all the parameters to send to the API endpoint
for the add update foods goal operation typically these are written to a http.Request
*/
type AddUpdateFoodsGoalParams struct {

	/*Calories
	  Manual calorie consumption goal in either calories or intensity must be provided.

	*/
	Calories int64
	/*Intensity
	  Food plan intensity (MAINTENANCE, EASIER, MEDIUM, KINDAHARD, or HARDER). Either calories or intensity must be provided.

	*/
	Intensity *string
	/*Personalized
	  Food plan type; true or false.

	*/
	Personalized *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) WithTimeout(timeout time.Duration) *AddUpdateFoodsGoalParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) WithContext(ctx context.Context) *AddUpdateFoodsGoalParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) WithHTTPClient(client *http.Client) *AddUpdateFoodsGoalParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCalories adds the calories to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) WithCalories(calories int64) *AddUpdateFoodsGoalParams {
	o.SetCalories(calories)
	return o
}

// SetCalories adds the calories to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) SetCalories(calories int64) {
	o.Calories = calories
}

// WithIntensity adds the intensity to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) WithIntensity(intensity *string) *AddUpdateFoodsGoalParams {
	o.SetIntensity(intensity)
	return o
}

// SetIntensity adds the intensity to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) SetIntensity(intensity *string) {
	o.Intensity = intensity
}

// WithPersonalized adds the personalized to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) WithPersonalized(personalized *string) *AddUpdateFoodsGoalParams {
	o.SetPersonalized(personalized)
	return o
}

// SetPersonalized adds the personalized to the add update foods goal params
func (o *AddUpdateFoodsGoalParams) SetPersonalized(personalized *string) {
	o.Personalized = personalized
}

// WriteToRequest writes these params to a swagger request
func (o *AddUpdateFoodsGoalParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param calories
	qrCalories := o.Calories
	qCalories := swag.FormatInt64(qrCalories)
	if qCalories != "" {
		if err := r.SetQueryParam("calories", qCalories); err != nil {
			return err
		}
	}

	if o.Intensity != nil {

		// query param intensity
		var qrIntensity string
		if o.Intensity != nil {
			qrIntensity = *o.Intensity
		}
		qIntensity := qrIntensity
		if qIntensity != "" {
			if err := r.SetQueryParam("intensity", qIntensity); err != nil {
				return err
			}
		}

	}

	if o.Personalized != nil {

		// query param personalized
		var qrPersonalized string
		if o.Personalized != nil {
			qrPersonalized = *o.Personalized
		}
		qPersonalized := qrPersonalized
		if qPersonalized != "" {
			if err := r.SetQueryParam("personalized", qPersonalized); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
