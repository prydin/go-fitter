// Code generated by go-swagger; DO NOT EDIT.

package food_logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddFoodsLogParams creates a new AddFoodsLogParams object
// with the default values initialized.
func NewAddFoodsLogParams() *AddFoodsLogParams {
	var ()
	return &AddFoodsLogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddFoodsLogParamsWithTimeout creates a new AddFoodsLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddFoodsLogParamsWithTimeout(timeout time.Duration) *AddFoodsLogParams {
	var ()
	return &AddFoodsLogParams{

		timeout: timeout,
	}
}

// NewAddFoodsLogParamsWithContext creates a new AddFoodsLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddFoodsLogParamsWithContext(ctx context.Context) *AddFoodsLogParams {
	var ()
	return &AddFoodsLogParams{

		Context: ctx,
	}
}

// NewAddFoodsLogParamsWithHTTPClient creates a new AddFoodsLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddFoodsLogParamsWithHTTPClient(client *http.Client) *AddFoodsLogParams {
	var ()
	return &AddFoodsLogParams{
		HTTPClient: client,
	}
}

/*AddFoodsLogParams contains all the parameters to send to the API endpoint
for the add foods log operation typically these are written to a http.Request
*/
type AddFoodsLogParams struct {

	/*Amount
	  The amount consumed in the format X.XX in the specified unitId.

	*/
	Amount string
	/*BrandName
	  Brand name of food. Valid only with foodName parameters.

	*/
	BrandName *string
	/*Calories
	  Calories for this serving size. This is allowed with foodName parameter (default to zero); otherwise it is ignored.

	*/
	Calories *int64
	/*Date
	  Log entry date in the format yyyy-MM-dd.

	*/
	Date strfmt.Date
	/*Favorite
	  The `true` value will add the food to the user's favorites after creating the log entry; while the `false` value will not. Valid only with foodId value.

	*/
	Favorite *bool
	/*FoodID
	  The ID of the food to be logged. Either foodId or foodName must be provided.

	*/
	FoodID string
	/*FoodName
	  Food entry name. Either foodId or foodName must be provided.

	*/
	FoodName *string
	/*MealTypeID
	  Meal types. 1=Breakfast; 2=Morning Snack; 3=Lunch; 4=Afternoon Snack; 5=Dinner; 7=Anytime.

	*/
	MealTypeID string
	/*UnitID
	  The ID of units used. Typically retrieved via a previous call to Get Food Logs, Search Foods, or Get Food Units.

	*/
	UnitID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add foods log params
func (o *AddFoodsLogParams) WithTimeout(timeout time.Duration) *AddFoodsLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add foods log params
func (o *AddFoodsLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add foods log params
func (o *AddFoodsLogParams) WithContext(ctx context.Context) *AddFoodsLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add foods log params
func (o *AddFoodsLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add foods log params
func (o *AddFoodsLogParams) WithHTTPClient(client *http.Client) *AddFoodsLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add foods log params
func (o *AddFoodsLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the add foods log params
func (o *AddFoodsLogParams) WithAmount(amount string) *AddFoodsLogParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the add foods log params
func (o *AddFoodsLogParams) SetAmount(amount string) {
	o.Amount = amount
}

// WithBrandName adds the brandName to the add foods log params
func (o *AddFoodsLogParams) WithBrandName(brandName *string) *AddFoodsLogParams {
	o.SetBrandName(brandName)
	return o
}

// SetBrandName adds the brandName to the add foods log params
func (o *AddFoodsLogParams) SetBrandName(brandName *string) {
	o.BrandName = brandName
}

// WithCalories adds the calories to the add foods log params
func (o *AddFoodsLogParams) WithCalories(calories *int64) *AddFoodsLogParams {
	o.SetCalories(calories)
	return o
}

// SetCalories adds the calories to the add foods log params
func (o *AddFoodsLogParams) SetCalories(calories *int64) {
	o.Calories = calories
}

// WithDate adds the date to the add foods log params
func (o *AddFoodsLogParams) WithDate(date strfmt.Date) *AddFoodsLogParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the add foods log params
func (o *AddFoodsLogParams) SetDate(date strfmt.Date) {
	o.Date = date
}

// WithFavorite adds the favorite to the add foods log params
func (o *AddFoodsLogParams) WithFavorite(favorite *bool) *AddFoodsLogParams {
	o.SetFavorite(favorite)
	return o
}

// SetFavorite adds the favorite to the add foods log params
func (o *AddFoodsLogParams) SetFavorite(favorite *bool) {
	o.Favorite = favorite
}

// WithFoodID adds the foodID to the add foods log params
func (o *AddFoodsLogParams) WithFoodID(foodID string) *AddFoodsLogParams {
	o.SetFoodID(foodID)
	return o
}

// SetFoodID adds the foodId to the add foods log params
func (o *AddFoodsLogParams) SetFoodID(foodID string) {
	o.FoodID = foodID
}

// WithFoodName adds the foodName to the add foods log params
func (o *AddFoodsLogParams) WithFoodName(foodName *string) *AddFoodsLogParams {
	o.SetFoodName(foodName)
	return o
}

// SetFoodName adds the foodName to the add foods log params
func (o *AddFoodsLogParams) SetFoodName(foodName *string) {
	o.FoodName = foodName
}

// WithMealTypeID adds the mealTypeID to the add foods log params
func (o *AddFoodsLogParams) WithMealTypeID(mealTypeID string) *AddFoodsLogParams {
	o.SetMealTypeID(mealTypeID)
	return o
}

// SetMealTypeID adds the mealTypeId to the add foods log params
func (o *AddFoodsLogParams) SetMealTypeID(mealTypeID string) {
	o.MealTypeID = mealTypeID
}

// WithUnitID adds the unitID to the add foods log params
func (o *AddFoodsLogParams) WithUnitID(unitID string) *AddFoodsLogParams {
	o.SetUnitID(unitID)
	return o
}

// SetUnitID adds the unitId to the add foods log params
func (o *AddFoodsLogParams) SetUnitID(unitID string) {
	o.UnitID = unitID
}

// WriteToRequest writes these params to a swagger request
func (o *AddFoodsLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param amount
	qrAmount := o.Amount
	qAmount := qrAmount
	if qAmount != "" {
		if err := r.SetQueryParam("amount", qAmount); err != nil {
			return err
		}
	}

	if o.BrandName != nil {

		// query param brandName
		var qrBrandName string
		if o.BrandName != nil {
			qrBrandName = *o.BrandName
		}
		qBrandName := qrBrandName
		if qBrandName != "" {
			if err := r.SetQueryParam("brandName", qBrandName); err != nil {
				return err
			}
		}

	}

	if o.Calories != nil {

		// query param calories
		var qrCalories int64
		if o.Calories != nil {
			qrCalories = *o.Calories
		}
		qCalories := swag.FormatInt64(qrCalories)
		if qCalories != "" {
			if err := r.SetQueryParam("calories", qCalories); err != nil {
				return err
			}
		}

	}

	// query param date
	qrDate := o.Date
	qDate := qrDate.String()
	if qDate != "" {
		if err := r.SetQueryParam("date", qDate); err != nil {
			return err
		}
	}

	if o.Favorite != nil {

		// query param favorite
		var qrFavorite bool
		if o.Favorite != nil {
			qrFavorite = *o.Favorite
		}
		qFavorite := swag.FormatBool(qrFavorite)
		if qFavorite != "" {
			if err := r.SetQueryParam("favorite", qFavorite); err != nil {
				return err
			}
		}

	}

	// query param foodId
	qrFoodID := o.FoodID
	qFoodID := qrFoodID
	if qFoodID != "" {
		if err := r.SetQueryParam("foodId", qFoodID); err != nil {
			return err
		}
	}

	if o.FoodName != nil {

		// query param foodName
		var qrFoodName string
		if o.FoodName != nil {
			qrFoodName = *o.FoodName
		}
		qFoodName := qrFoodName
		if qFoodName != "" {
			if err := r.SetQueryParam("foodName", qFoodName); err != nil {
				return err
			}
		}

	}

	// query param mealTypeId
	qrMealTypeID := o.MealTypeID
	qMealTypeID := qrMealTypeID
	if qMealTypeID != "" {
		if err := r.SetQueryParam("mealTypeId", qMealTypeID); err != nil {
			return err
		}
	}

	// query param unitId
	qrUnitID := o.UnitID
	qUnitID := qrUnitID
	if qUnitID != "" {
		if err := r.SetQueryParam("unitId", qUnitID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
