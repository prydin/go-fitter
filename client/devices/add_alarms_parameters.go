// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddAlarmsParams creates a new AddAlarmsParams object
// with the default values initialized.
func NewAddAlarmsParams() *AddAlarmsParams {
	var ()
	return &AddAlarmsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddAlarmsParamsWithTimeout creates a new AddAlarmsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddAlarmsParamsWithTimeout(timeout time.Duration) *AddAlarmsParams {
	var ()
	return &AddAlarmsParams{

		timeout: timeout,
	}
}

// NewAddAlarmsParamsWithContext creates a new AddAlarmsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddAlarmsParamsWithContext(ctx context.Context) *AddAlarmsParams {
	var ()
	return &AddAlarmsParams{

		Context: ctx,
	}
}

// NewAddAlarmsParamsWithHTTPClient creates a new AddAlarmsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddAlarmsParamsWithHTTPClient(client *http.Client) *AddAlarmsParams {
	var ()
	return &AddAlarmsParams{
		HTTPClient: client,
	}
}

/*AddAlarmsParams contains all the parameters to send to the API endpoint
for the add alarms operation typically these are written to a http.Request
*/
type AddAlarmsParams struct {

	/*Enabled
	  true or false. If false, alarm does not vibrate until enabled is set to true.

	*/
	Enabled bool
	/*Recurring
	  true or false. If false, the alarm is a single event.

	*/
	Recurring string
	/*Time
	  Time of day that the alarm vibrates with a UTC timezone offset, e.g. 07:15-08:00.

	*/
	Time string
	/*TrackerID
	  The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.

	*/
	TrackerID int64
	/*WeekDays
	  Comma separated list of days of the week on which the alarm vibrates, e.g. MONDAY, TUESDAY.

	*/
	WeekDays string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add alarms params
func (o *AddAlarmsParams) WithTimeout(timeout time.Duration) *AddAlarmsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add alarms params
func (o *AddAlarmsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add alarms params
func (o *AddAlarmsParams) WithContext(ctx context.Context) *AddAlarmsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add alarms params
func (o *AddAlarmsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add alarms params
func (o *AddAlarmsParams) WithHTTPClient(client *http.Client) *AddAlarmsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add alarms params
func (o *AddAlarmsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabled adds the enabled to the add alarms params
func (o *AddAlarmsParams) WithEnabled(enabled bool) *AddAlarmsParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the add alarms params
func (o *AddAlarmsParams) SetEnabled(enabled bool) {
	o.Enabled = enabled
}

// WithRecurring adds the recurring to the add alarms params
func (o *AddAlarmsParams) WithRecurring(recurring string) *AddAlarmsParams {
	o.SetRecurring(recurring)
	return o
}

// SetRecurring adds the recurring to the add alarms params
func (o *AddAlarmsParams) SetRecurring(recurring string) {
	o.Recurring = recurring
}

// WithTime adds the time to the add alarms params
func (o *AddAlarmsParams) WithTime(time string) *AddAlarmsParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the add alarms params
func (o *AddAlarmsParams) SetTime(time string) {
	o.Time = time
}

// WithTrackerID adds the trackerID to the add alarms params
func (o *AddAlarmsParams) WithTrackerID(trackerID int64) *AddAlarmsParams {
	o.SetTrackerID(trackerID)
	return o
}

// SetTrackerID adds the trackerId to the add alarms params
func (o *AddAlarmsParams) SetTrackerID(trackerID int64) {
	o.TrackerID = trackerID
}

// WithWeekDays adds the weekDays to the add alarms params
func (o *AddAlarmsParams) WithWeekDays(weekDays string) *AddAlarmsParams {
	o.SetWeekDays(weekDays)
	return o
}

// SetWeekDays adds the weekDays to the add alarms params
func (o *AddAlarmsParams) SetWeekDays(weekDays string) {
	o.WeekDays = weekDays
}

// WriteToRequest writes these params to a swagger request
func (o *AddAlarmsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param enabled
	qrEnabled := o.Enabled
	qEnabled := swag.FormatBool(qrEnabled)
	if qEnabled != "" {
		if err := r.SetQueryParam("enabled", qEnabled); err != nil {
			return err
		}
	}

	// query param recurring
	qrRecurring := o.Recurring
	qRecurring := qrRecurring
	if qRecurring != "" {
		if err := r.SetQueryParam("recurring", qRecurring); err != nil {
			return err
		}
	}

	// query param time
	qrTime := o.Time
	qTime := qrTime
	if qTime != "" {
		if err := r.SetQueryParam("time", qTime); err != nil {
			return err
		}
	}

	// path param tracker-id
	if err := r.SetPathParam("tracker-id", swag.FormatInt64(o.TrackerID)); err != nil {
		return err
	}

	// query param weekDays
	qrWeekDays := o.WeekDays
	qWeekDays := qrWeekDays
	if qWeekDays != "" {
		if err := r.SetQueryParam("weekDays", qWeekDays); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
