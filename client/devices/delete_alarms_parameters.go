// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteAlarmsParams creates a new DeleteAlarmsParams object
// with the default values initialized.
func NewDeleteAlarmsParams() *DeleteAlarmsParams {
	var ()
	return &DeleteAlarmsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteAlarmsParamsWithTimeout creates a new DeleteAlarmsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteAlarmsParamsWithTimeout(timeout time.Duration) *DeleteAlarmsParams {
	var ()
	return &DeleteAlarmsParams{

		timeout: timeout,
	}
}

// NewDeleteAlarmsParamsWithContext creates a new DeleteAlarmsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteAlarmsParamsWithContext(ctx context.Context) *DeleteAlarmsParams {
	var ()
	return &DeleteAlarmsParams{

		Context: ctx,
	}
}

// NewDeleteAlarmsParamsWithHTTPClient creates a new DeleteAlarmsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteAlarmsParamsWithHTTPClient(client *http.Client) *DeleteAlarmsParams {
	var ()
	return &DeleteAlarmsParams{
		HTTPClient: client,
	}
}

/*DeleteAlarmsParams contains all the parameters to send to the API endpoint
for the delete alarms operation typically these are written to a http.Request
*/
type DeleteAlarmsParams struct {

	/*AlarmID
	  The ID of the alarm to be updated. The alarm-id value is found via the Get Alarms endpoint.

	*/
	AlarmID int64
	/*TrackerID
	  The ID of the tracker whose alarms is managed. The tracker-id value is found via the Get Devices endpoint.

	*/
	TrackerID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete alarms params
func (o *DeleteAlarmsParams) WithTimeout(timeout time.Duration) *DeleteAlarmsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete alarms params
func (o *DeleteAlarmsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete alarms params
func (o *DeleteAlarmsParams) WithContext(ctx context.Context) *DeleteAlarmsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete alarms params
func (o *DeleteAlarmsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete alarms params
func (o *DeleteAlarmsParams) WithHTTPClient(client *http.Client) *DeleteAlarmsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete alarms params
func (o *DeleteAlarmsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAlarmID adds the alarmID to the delete alarms params
func (o *DeleteAlarmsParams) WithAlarmID(alarmID int64) *DeleteAlarmsParams {
	o.SetAlarmID(alarmID)
	return o
}

// SetAlarmID adds the alarmId to the delete alarms params
func (o *DeleteAlarmsParams) SetAlarmID(alarmID int64) {
	o.AlarmID = alarmID
}

// WithTrackerID adds the trackerID to the delete alarms params
func (o *DeleteAlarmsParams) WithTrackerID(trackerID int64) *DeleteAlarmsParams {
	o.SetTrackerID(trackerID)
	return o
}

// SetTrackerID adds the trackerId to the delete alarms params
func (o *DeleteAlarmsParams) SetTrackerID(trackerID int64) {
	o.TrackerID = trackerID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteAlarmsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param alarm-id
	if err := r.SetPathParam("alarm-id", swag.FormatInt64(o.AlarmID)); err != nil {
		return err
	}

	// path param tracker-id
	if err := r.SetPathParam("tracker-id", swag.FormatInt64(o.TrackerID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
