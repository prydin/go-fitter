// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddAlarms adds alarm

Adds the alarm settings to a given ID for a given device.
*/
func (a *Client) AddAlarms(params *AddAlarmsParams, authInfo runtime.ClientAuthInfoWriter) (*AddAlarmsOK, *AddAlarmsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAlarmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAlarms",
		Method:             "POST",
		PathPattern:        "/1/user/-/devices/tracker/{tracker-id}/alarms.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAlarmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddAlarmsOK:
		return value, nil, nil
	case *AddAlarmsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteAlarms deletes alarm

Deletes the user's device alarm entry with the given ID for a given device.
*/
func (a *Client) DeleteAlarms(params *DeleteAlarmsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAlarmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlarmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAlarms",
		Method:             "DELETE",
		PathPattern:        "/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAlarmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAlarmsOK), nil

}

/*
GetAlarms gets alarms

Returns alarms for a device
*/
func (a *Client) GetAlarms(params *GetAlarmsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAlarmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlarmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlarms",
		Method:             "GET",
		PathPattern:        "/1/user/-/devices/tracker/{tracker-id}/alarms.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlarmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlarmsOK), nil

}

/*
GetDevices gets devices

Returns a list of the Fitbit devices connected to a user's account.
*/
func (a *Client) GetDevices(params *GetDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevices",
		Method:             "GET",
		PathPattern:        "/1/user/-/devices.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicesOK), nil

}

/*
UpdateAlarms updates alarm

Updates the alarm entry with a given ID for a given device. It also gets a response in the format requested.
*/
func (a *Client) UpdateAlarms(params *UpdateAlarmsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAlarmsOK, *UpdateAlarmsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAlarmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAlarms",
		Method:             "POST",
		PathPattern:        "/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAlarmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAlarmsOK:
		return value, nil, nil
	case *UpdateAlarmsCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
