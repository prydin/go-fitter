// Code generated by go-swagger; DO NOT EDIT.

package sleep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sleep API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sleep API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddSleep logs sleep

Creates a log entry for a sleep event and returns a response in the format requested.
*/
func (a *Client) AddSleep(params *AddSleepParams, authInfo runtime.ClientAuthInfoWriter) (*AddSleepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSleepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSleep",
		Method:             "POST",
		PathPattern:        "/1.2/user/-/sleep.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSleepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddSleepOK), nil

}

/*
DeleteSleep deletes sleep log

Deletes a user's sleep log entry with the given ID.
*/
func (a *Client) DeleteSleep(params *DeleteSleepParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSleepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSleepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSleep",
		Method:             "DELETE",
		PathPattern:        "/1.2/user/-/sleep/{log-id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSleepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSleepOK), nil

}

/*
GetSleepByDate gets sleep log

The Get Sleep Logs by Date endpoint returns a summary and list of a user's sleep log entries (including naps) as well as detailed sleep entry data for a given day.
*/
func (a *Client) GetSleepByDate(params *GetSleepByDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetSleepByDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSleepByDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSleepByDate",
		Method:             "GET",
		PathPattern:        "/1.2/user/-/sleep/date/{date}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSleepByDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSleepByDateOK), nil

}

/*
GetSleepByDateRange gets sleep logs by date range

The Get Sleep Logs by Date Range endpoint returns a list of a user's sleep log entries (including naps) as well as detailed sleep entry data for a given date range (inclusive of start and end dates).
*/
func (a *Client) GetSleepByDateRange(params *GetSleepByDateRangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetSleepByDateRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSleepByDateRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSleepByDateRange",
		Method:             "GET",
		PathPattern:        "/1.2/user/-/sleep/date/{base-date}/{end-date}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSleepByDateRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSleepByDateRangeOK), nil

}

/*
GetSleepGoal gets sleep goal

Returns the user's sleep goal.
*/
func (a *Client) GetSleepGoal(params *GetSleepGoalParams, authInfo runtime.ClientAuthInfoWriter) (*GetSleepGoalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSleepGoalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSleepGoal",
		Method:             "GET",
		PathPattern:        "/1.2/user/-/sleep/goal.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSleepGoalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSleepGoalOK), nil

}

/*
GetSleepList gets sleep logs list

The Get Sleep Logs List endpoint returns a list of a user's sleep logs (including naps) before or after a given day with offset, limit, and sort order.
*/
func (a *Client) GetSleepList(params *GetSleepListParams, authInfo runtime.ClientAuthInfoWriter) (*GetSleepListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSleepListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSleepList",
		Method:             "GET",
		PathPattern:        "/1.2/user/-/sleep/list.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSleepListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSleepListOK), nil

}

/*
UpdateSleepGoal updates sleep goal

Create or update the user's sleep goal and get a response in the JSON format.
*/
func (a *Client) UpdateSleepGoal(params *UpdateSleepGoalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSleepGoalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSleepGoalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSleepGoal",
		Method:             "POST",
		PathPattern:        "/1.2/user/-/sleep/goal.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSleepGoalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSleepGoalOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
