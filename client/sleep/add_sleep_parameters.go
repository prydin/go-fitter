// Code generated by go-swagger; DO NOT EDIT.

package sleep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddSleepParams creates a new AddSleepParams object
// with the default values initialized.
func NewAddSleepParams() *AddSleepParams {
	var ()
	return &AddSleepParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddSleepParamsWithTimeout creates a new AddSleepParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddSleepParamsWithTimeout(timeout time.Duration) *AddSleepParams {
	var ()
	return &AddSleepParams{

		timeout: timeout,
	}
}

// NewAddSleepParamsWithContext creates a new AddSleepParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddSleepParamsWithContext(ctx context.Context) *AddSleepParams {
	var ()
	return &AddSleepParams{

		Context: ctx,
	}
}

// NewAddSleepParamsWithHTTPClient creates a new AddSleepParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddSleepParamsWithHTTPClient(client *http.Client) *AddSleepParams {
	var ()
	return &AddSleepParams{
		HTTPClient: client,
	}
}

/*AddSleepParams contains all the parameters to send to the API endpoint
for the add sleep operation typically these are written to a http.Request
*/
type AddSleepParams struct {

	/*Date
	  Log entry in the format yyyy-MM-dd.

	*/
	Date strfmt.Date
	/*Duration
	  Duration in milliseconds.

	*/
	Duration int64
	/*StartTime
	  Start time includes hours and minutes in the format HH:mm.

	*/
	StartTime string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add sleep params
func (o *AddSleepParams) WithTimeout(timeout time.Duration) *AddSleepParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add sleep params
func (o *AddSleepParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add sleep params
func (o *AddSleepParams) WithContext(ctx context.Context) *AddSleepParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add sleep params
func (o *AddSleepParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add sleep params
func (o *AddSleepParams) WithHTTPClient(client *http.Client) *AddSleepParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add sleep params
func (o *AddSleepParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDate adds the date to the add sleep params
func (o *AddSleepParams) WithDate(date strfmt.Date) *AddSleepParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the add sleep params
func (o *AddSleepParams) SetDate(date strfmt.Date) {
	o.Date = date
}

// WithDuration adds the duration to the add sleep params
func (o *AddSleepParams) WithDuration(duration int64) *AddSleepParams {
	o.SetDuration(duration)
	return o
}

// SetDuration adds the duration to the add sleep params
func (o *AddSleepParams) SetDuration(duration int64) {
	o.Duration = duration
}

// WithStartTime adds the startTime to the add sleep params
func (o *AddSleepParams) WithStartTime(startTime string) *AddSleepParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the add sleep params
func (o *AddSleepParams) SetStartTime(startTime string) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *AddSleepParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param date
	qrDate := o.Date
	qDate := qrDate.String()
	if qDate != "" {
		if err := r.SetQueryParam("date", qDate); err != nil {
			return err
		}
	}

	// query param duration
	qrDuration := o.Duration
	qDuration := swag.FormatInt64(qrDuration)
	if qDuration != "" {
		if err := r.SetQueryParam("duration", qDuration); err != nil {
			return err
		}
	}

	// query param startTime
	qrStartTime := o.StartTime
	qStartTime := qrStartTime
	if qStartTime != "" {
		if err := r.SetQueryParam("startTime", qStartTime); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
