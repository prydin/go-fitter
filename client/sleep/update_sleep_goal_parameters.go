// Code generated by go-swagger; DO NOT EDIT.

package sleep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateSleepGoalParams creates a new UpdateSleepGoalParams object
// with the default values initialized.
func NewUpdateSleepGoalParams() *UpdateSleepGoalParams {
	var ()
	return &UpdateSleepGoalParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSleepGoalParamsWithTimeout creates a new UpdateSleepGoalParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSleepGoalParamsWithTimeout(timeout time.Duration) *UpdateSleepGoalParams {
	var ()
	return &UpdateSleepGoalParams{

		timeout: timeout,
	}
}

// NewUpdateSleepGoalParamsWithContext creates a new UpdateSleepGoalParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSleepGoalParamsWithContext(ctx context.Context) *UpdateSleepGoalParams {
	var ()
	return &UpdateSleepGoalParams{

		Context: ctx,
	}
}

// NewUpdateSleepGoalParamsWithHTTPClient creates a new UpdateSleepGoalParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSleepGoalParamsWithHTTPClient(client *http.Client) *UpdateSleepGoalParams {
	var ()
	return &UpdateSleepGoalParams{
		HTTPClient: client,
	}
}

/*UpdateSleepGoalParams contains all the parameters to send to the API endpoint
for the update sleep goal operation typically these are written to a http.Request
*/
type UpdateSleepGoalParams struct {

	/*MinDuration
	  Duration of sleep goal.

	*/
	MinDuration string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update sleep goal params
func (o *UpdateSleepGoalParams) WithTimeout(timeout time.Duration) *UpdateSleepGoalParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update sleep goal params
func (o *UpdateSleepGoalParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update sleep goal params
func (o *UpdateSleepGoalParams) WithContext(ctx context.Context) *UpdateSleepGoalParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update sleep goal params
func (o *UpdateSleepGoalParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update sleep goal params
func (o *UpdateSleepGoalParams) WithHTTPClient(client *http.Client) *UpdateSleepGoalParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update sleep goal params
func (o *UpdateSleepGoalParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMinDuration adds the minDuration to the update sleep goal params
func (o *UpdateSleepGoalParams) WithMinDuration(minDuration string) *UpdateSleepGoalParams {
	o.SetMinDuration(minDuration)
	return o
}

// SetMinDuration adds the minDuration to the update sleep goal params
func (o *UpdateSleepGoalParams) SetMinDuration(minDuration string) {
	o.MinDuration = minDuration
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSleepGoalParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param minDuration
	qrMinDuration := o.MinDuration
	qMinDuration := qrMinDuration
	if qMinDuration != "" {
		if err := r.SetQueryParam("minDuration", qMinDuration); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
