// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/prydin/go-fitter/models"
)

// OauthTokenReader is a Reader for the OauthToken structure.
type OauthTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OauthTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOauthTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewOauthTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewOauthTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOauthTokenOK creates a OauthTokenOK with default headers values
func NewOauthTokenOK() *OauthTokenOK {
	return &OauthTokenOK{}
}

/*OauthTokenOK handles this case with default header values.

A successful request.
*/
type OauthTokenOK struct {
	Payload *OauthTokenOKBody
}

func (o *OauthTokenOK) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] oauthTokenOK  %+v", 200, o.Payload)
}

func (o *OauthTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OauthTokenOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOauthTokenBadRequest creates a OauthTokenBadRequest with default headers values
func NewOauthTokenBadRequest() *OauthTokenBadRequest {
	return &OauthTokenBadRequest{}
}

/*OauthTokenBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satisfied.
*/
type OauthTokenBadRequest struct {
	Payload *models.Oauth2ErrorResponse
}

func (o *OauthTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] oauthTokenBadRequest  %+v", 400, o.Payload)
}

func (o *OauthTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Oauth2ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOauthTokenUnauthorized creates a OauthTokenUnauthorized with default headers values
func NewOauthTokenUnauthorized() *OauthTokenUnauthorized {
	return &OauthTokenUnauthorized{}
}

/*OauthTokenUnauthorized handles this case with default header values.

Authentication was unsuccessful due to invalid client credentials.
*/
type OauthTokenUnauthorized struct {
	Payload *models.Oauth2ErrorResponse
}

func (o *OauthTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] oauthTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *OauthTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Oauth2ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*OauthTokenOKBody oauth token o k body
swagger:model OauthTokenOKBody
*/
type OauthTokenOKBody struct {

	// The access token your application should use to make requests on behalf of the user.
	AccessToken string `json:"access_token,omitempty"`

	// How long in seconds the access token will be valid for.
	ExpiresIn int64 `json:"expires_in,omitempty"`

	// A token used to extend the lifetime of an authorization
	RefreshToken string `json:"refresh_token,omitempty"`

	// A space-separated list of scopes the user authorized. May be fewer than the application requested.
	Scope string `json:"scope,omitempty"`

	// Provides any state that might be useful to your application when the user is redirected back to your application. This parameter will be added to the redirect URI exactly as your application specifies in the authorization request.
	State string `json:"state,omitempty"`

	// Will always be 'Bearer'.
	TokenType string `json:"token_type,omitempty"`

	// The id (sometimes referred to as encoded_id) of the Fitbit user that authorized your application.
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this oauth token o k body
func (o *OauthTokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OauthTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OauthTokenOKBody) UnmarshalBinary(b []byte) error {
	var res OauthTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
