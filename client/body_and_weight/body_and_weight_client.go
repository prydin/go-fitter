// Code generated by go-swagger; DO NOT EDIT.

package body_and_weight

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new body and weight API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for body and weight API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UpdateBodyFatGoal updates body fat goal

Updates user's fat percentage goal.
*/
func (a *Client) UpdateBodyFatGoal(params *UpdateBodyFatGoalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBodyFatGoalOK, *UpdateBodyFatGoalCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBodyFatGoalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateBodyFatGoal",
		Method:             "POST",
		PathPattern:        "/1/user/-/body/log/fat/goal.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBodyFatGoalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBodyFatGoalOK:
		return value, nil, nil
	case *UpdateBodyFatGoalCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
AddBodyFatLog logs body fat

Creates a log entry for body fat and returns a response in the format requested.
*/
func (a *Client) AddBodyFatLog(params *AddBodyFatLogParams, authInfo runtime.ClientAuthInfoWriter) (*AddBodyFatLogOK, *AddBodyFatLogCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBodyFatLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addBodyFatLog",
		Method:             "POST",
		PathPattern:        "/1/user/-/body/log/fat.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBodyFatLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddBodyFatLogOK:
		return value, nil, nil
	case *AddBodyFatLogCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
AddWeightLog logs weight

Creates log entry for a body weight using units in the unit systems that corresponds to the Accept-Language header provided and gets a response in the format requested.
*/
func (a *Client) AddWeightLog(params *AddWeightLogParams, authInfo runtime.ClientAuthInfoWriter) (*AddWeightLogOK, *AddWeightLogCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWeightLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWeightLog",
		Method:             "POST",
		PathPattern:        "/1/user/-/body/log/weight.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddWeightLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddWeightLogOK:
		return value, nil, nil
	case *AddWeightLogCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteBodyFatLog deletes body fat log

Deletes a user's body fat log entry with the given ID.
*/
func (a *Client) DeleteBodyFatLog(params *DeleteBodyFatLogParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBodyFatLogOK, *DeleteBodyFatLogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBodyFatLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBodyFatLog",
		Method:             "DELETE",
		PathPattern:        "/1/user/-/body/log/fat/{body-fat-log-id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBodyFatLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteBodyFatLogOK:
		return value, nil, nil
	case *DeleteBodyFatLogNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteWeightLog deletes weight log

Deletes a user's body weight log entrywith the given ID.
*/
func (a *Client) DeleteWeightLog(params *DeleteWeightLogParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWeightLogOK, *DeleteWeightLogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWeightLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWeightLog",
		Method:             "DELETE",
		PathPattern:        "/1/user/-/body/log/weight/{body-weight-log-id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWeightLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteWeightLogOK:
		return value, nil, nil
	case *DeleteWeightLogNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetBodyFatByDate gets body fat logs

Retreives a list of all user's body fat log entries for a given day in the format requested.
*/
func (a *Client) GetBodyFatByDate(params *GetBodyFatByDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetBodyFatByDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBodyFatByDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBodyFatByDate",
		Method:             "GET",
		PathPattern:        "/1/user/-/body/log/fat/date/{date}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBodyFatByDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBodyFatByDateOK), nil

}

/*
GetBodyFatByDatePeriod gets body fat logs

Retreives a list of all user's body fat log entries for a given day in the format requested.
*/
func (a *Client) GetBodyFatByDatePeriod(params *GetBodyFatByDatePeriodParams, authInfo runtime.ClientAuthInfoWriter) (*GetBodyFatByDatePeriodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBodyFatByDatePeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBodyFatByDatePeriod",
		Method:             "GET",
		PathPattern:        "/1/user/-/body/log/fat/date/{date}/{period}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBodyFatByDatePeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBodyFatByDatePeriodOK), nil

}

/*
GetBodyFatByDateRange gets body fat logs

Retreives a list of all user's body fat log entries for a given day in the format requested.
*/
func (a *Client) GetBodyFatByDateRange(params *GetBodyFatByDateRangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetBodyFatByDateRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBodyFatByDateRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBodyFatByDateRange",
		Method:             "GET",
		PathPattern:        "/1/user/-/body/log/fat/date/{base-date}/{end-date}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBodyFatByDateRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBodyFatByDateRangeOK), nil

}

/*
GetBodyGoals gets body goals

Retreives a user's current body fat percentage or weight goal using units in the unit systems that corresponds to the Accept-Language header providedin the format requested.
*/
func (a *Client) GetBodyGoals(params *GetBodyGoalsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBodyGoalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBodyGoalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBodyGoals",
		Method:             "GET",
		PathPattern:        "/1/user/-/body/log/{goal-type}/goal.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBodyGoalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBodyGoalsOK), nil

}

/*
GetWeightByDate gets weight logs

Retreives a list of all user's body weight log entries for a given day using units in the unit systems which corresponds to the Accept-Language header provided.
*/
func (a *Client) GetWeightByDate(params *GetWeightByDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetWeightByDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWeightByDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWeightByDate",
		Method:             "GET",
		PathPattern:        "/1/user/-/body/log/weight/date/{date}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWeightByDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWeightByDateOK), nil

}

/*
GetWeightByDatePeriod gets body fat logs

Retreives a list of all user's body weight log entries for a given day in the format requested.
*/
func (a *Client) GetWeightByDatePeriod(params *GetWeightByDatePeriodParams, authInfo runtime.ClientAuthInfoWriter) (*GetWeightByDatePeriodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWeightByDatePeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWeightByDatePeriod",
		Method:             "GET",
		PathPattern:        "/1/user/-/body/log/weight/date/{date}/{period}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWeightByDatePeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWeightByDatePeriodOK), nil

}

/*
GetWeightByDateRange gets body fat logs

Retreives a list of all user's body fat log entries for a given day in the format requested.
*/
func (a *Client) GetWeightByDateRange(params *GetWeightByDateRangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetWeightByDateRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWeightByDateRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWeightByDateRange",
		Method:             "GET",
		PathPattern:        "/1/user/-/body/log/weight/date/{base-date}/{end-date}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWeightByDateRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWeightByDateRangeOK), nil

}

/*
UpdateWeightGoal updates weight goal

Updates user's fat percentage goal.
*/
func (a *Client) UpdateWeightGoal(params *UpdateWeightGoalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWeightGoalOK, *UpdateWeightGoalCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWeightGoalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWeightGoal",
		Method:             "POST",
		PathPattern:        "/1/user/-/body/log/weight/goal.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWeightGoalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateWeightGoalOK:
		return value, nil, nil
	case *UpdateWeightGoalCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
