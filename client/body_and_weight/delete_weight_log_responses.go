// Code generated by go-swagger; DO NOT EDIT.

package body_and_weight

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteWeightLogReader is a Reader for the DeleteWeightLog structure.
type DeleteWeightLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWeightLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteWeightLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewDeleteWeightLogNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteWeightLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteWeightLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteWeightLogOK creates a DeleteWeightLogOK with default headers values
func NewDeleteWeightLogOK() *DeleteWeightLogOK {
	return &DeleteWeightLogOK{}
}

/*DeleteWeightLogOK handles this case with default header values.

A successful request.
*/
type DeleteWeightLogOK struct {
}

func (o *DeleteWeightLogOK) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/body/log/weight/{body-weight-log-id}.json][%d] deleteWeightLogOK ", 200)
}

func (o *DeleteWeightLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWeightLogNoContent creates a DeleteWeightLogNoContent with default headers values
func NewDeleteWeightLogNoContent() *DeleteWeightLogNoContent {
	return &DeleteWeightLogNoContent{}
}

/*DeleteWeightLogNoContent handles this case with default header values.

The server successfully processed the request, but is not returning any content.
*/
type DeleteWeightLogNoContent struct {
}

func (o *DeleteWeightLogNoContent) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/body/log/weight/{body-weight-log-id}.json][%d] deleteWeightLogNoContent ", 204)
}

func (o *DeleteWeightLogNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWeightLogBadRequest creates a DeleteWeightLogBadRequest with default headers values
func NewDeleteWeightLogBadRequest() *DeleteWeightLogBadRequest {
	return &DeleteWeightLogBadRequest{}
}

/*DeleteWeightLogBadRequest handles this case with default header values.

The request had bad syntax or was inherently impossible to be satified.
*/
type DeleteWeightLogBadRequest struct {
}

func (o *DeleteWeightLogBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/body/log/weight/{body-weight-log-id}.json][%d] deleteWeightLogBadRequest ", 400)
}

func (o *DeleteWeightLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWeightLogUnauthorized creates a DeleteWeightLogUnauthorized with default headers values
func NewDeleteWeightLogUnauthorized() *DeleteWeightLogUnauthorized {
	return &DeleteWeightLogUnauthorized{}
}

/*DeleteWeightLogUnauthorized handles this case with default header values.

The request requires user authentication.
*/
type DeleteWeightLogUnauthorized struct {
}

func (o *DeleteWeightLogUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /1/user/-/body/log/weight/{body-weight-log-id}.json][%d] deleteWeightLogUnauthorized ", 401)
}

func (o *DeleteWeightLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
